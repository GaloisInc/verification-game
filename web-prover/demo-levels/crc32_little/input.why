(* ---------------------------------------------------------- *)
(* --- Post-condition (generated) in 'crc32_little'       --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_post
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Post-condition (generated) in 'crc32_little'":
  let a_0 = (shift ((shift ((global g_crc_table_6697)) 0)) 0) in
  forall c_5 c_4 c_3 c_2 c_1 c_0 crc_4 crc_3 crc_2 crc_1 crc_0 crc32_little_0
    len_3 len_2 len_1 len_0 retres_3 retres_2 retres_1 retres_0 : int.
  forall malloc_4 malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_4 mchar_3 mchar_2 mchar_1 mchar_0 mint_5 mint_4 mint_3 mint_2
    mint_1 mint_0 : map addr int.
  forall mptr_4 mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_5 buf_4 buf_3 buf_2 buf_1 buf_0 buf4_3 buf4_2 buf4_1 buf4_0
    tmp_9_0 : addr.
  let x_0 = (land 255 ((to_uint32 ((lxor c_4 mint_4[buf_4]))))) in
  let x_1 = (to_uint32 ((lxor ((lsr c_4 8)) mint_4[(shift a_0 x_0)]))) in
  (len_2 <= 3) ->
  (len_1 <= 31) ->
  ((framed mptr_4)) ->
  ((linked malloc_4)) ->
  ((sconst mchar_4)) ->
  ((is_uint64 crc_4)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 crc32_little_0)) ->
  ((is_uint64 retres_3)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_5)) ->
  ((is_uint32 c_4)) ->
  ((is_uint32 c_3)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 crc32_little_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((p_galois'crc32_little'P malloc_4 mptr_4 mchar_4 mint_5 crc_4 buf_5 len_3)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32
     mint_3[(shift a_0
              ((land 255 ((to_uint32 ((lxor c_4 mint_3[tmp_9_0])))))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_4 mptr_4
     mchar_4 mint_5 crc_4 buf_5 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_4 mptr_4
     mchar_4 mint_5 crc_4 buf_5 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_4 mptr_4
     mchar_4 mint_5 crc_4 buf_5 len_3 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  (if (0 = len_2)
   then ((malloc_3 = malloc_2) /\ (mchar_3 = mchar_2) /\ (mint_4 = mint_2) /\
         (mptr_3 = mptr_2) /\ (c_5 = c_2) /\
         (crc32_little_0 = ((to_uint32 ((lnot c_5))))))
   else (((valid_rd malloc_3 buf_4 1)) /\ (((to_uint32 x_0)) <= 255) /\
         ((p_galois'crc32_little'I4 malloc_3 mptr_3 mchar_3 mint_4 malloc_4
            mptr_4 mchar_4 mint_5 crc_4 buf_5 len_3 retres_3 c_4 buf4_3 crc_3
            buf_4 1)) /\ (c_5 = x_1) /\
         (crc32_little_0 = ((to_uint32 ((lnot x_1))))))) ->
  ((p_galois'crc32_little'Q malloc_3 mptr_3 mchar_3 mint_4 malloc_4 mptr_4
     mchar_4 mint_5 crc32_little_0 crc_4 buf_5 len_3))

end

(* ---------------------------------------------------------- *)
(* --- Preservation of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_preserved
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import Cbits.Cbits
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Globals.Globals

goal WP "expl:Preservation of Invariant 'galois_decorator' (generated)":
  let a_0 = (shift ((shift ((global g_crc_table_6697)) 0)) 0) in
  forall c_0 crc_1 crc_0 len_1 len_0 retres_0 : int.
  forall malloc_1 malloc_0 : map int int.
  forall mchar_1 mchar_0 mint_1 mint_0 : map addr int.
  forall mptr_1 mptr_0 : map addr addr.
  forall buf_1 buf_0 buf4_0 : addr.
  let x_0 = mint_0[buf_0] in
  let x_1 = len_0 - 1 in
  let x_2 = (land 255 ((to_uint32 ((lxor c_0 x_0))))) in
  let x_3 = mint_0[(shift a_0 x_2)] in
  (0 <> len_0) ->
  ((framed mptr_1)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_1)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint8 x_0)) ->
  ((valid_rd malloc_0 buf_0 1)) ->
  ((is_uint32 x_1)) ->
  (0 <> ((land 3 ((cast buf_0))))) ->
  ((p_galois'crc32_little'P malloc_1 mptr_1 mchar_1 mint_1 crc_1 buf_1 len_1)) ->
  (((to_uint32 x_2)) <= 255) ->
  ((is_uint32 x_3)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_1
     mchar_1 mint_1 crc_1 buf_1 len_1 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_1
     mchar_1 mint_1 crc_1 buf_1 len_1 retres_0
     ((to_uint32 ((lxor ((lsr c_0 8)) x_3)))) buf4_0 crc_0 ((shift buf_0 1))
     x_1))

end

(* ---------------------------------------------------------- *)
(* --- Establishment of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_established
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits

goal WP "expl:Establishment of Invariant 'galois_decorator' (generated)":
  forall crc_0 len_0 retres_0 : int.
  forall malloc_0 : map int int.
  forall mchar_0 mint_0 : map addr int.
  forall mptr_0 : map addr addr.
  forall buf_0 buf4_0 : addr.
  ((framed mptr_0)) ->
  ((linked malloc_0)) ->
  ((sconst mchar_0)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 len_0)) ->
  ((p_galois'crc32_little'P malloc_0 mptr_0 mchar_0 mint_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_0 mptr_0
     mchar_0 mint_0 crc_0 buf_0 len_0 retres_0
     ((to_uint32 ((lnot ((to_uint32 crc_0)))))) buf4_0 crc_0 buf_0 len_0))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4667) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import Cbits.Cbits
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4667)":
  forall c_0 crc_1 crc_0 len_1 len_0 retres_0 : int.
  forall malloc_1 malloc_0 : map int int.
  forall mchar_1 mchar_0 mint_1 mint_0 : map addr int.
  forall mptr_1 mptr_0 : map addr addr.
  forall buf_0 buf4_0 tmp_0 : addr.
  let x_0 = mint_0[tmp_0] in
  let x_1 = (land 255 ((to_uint32 ((lxor c_0 x_0))))) in
  (0 <> len_0) ->
  ((framed mptr_1)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_1)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint8 x_0)) ->
  (0 <> ((land 3 ((cast tmp_0))))) ->
  ((p_galois'crc32_little'P malloc_1 mptr_1 mchar_1 mint_1 crc_1 buf_0 len_1)) ->
  ((is_uint32
     mint_0[(shift ((shift ((shift ((global g_crc_table_6697)) 0)) 0)) x_1)])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_1
     mchar_1 mint_1 crc_1 buf_0 len_1 retres_0 c_0 buf4_0 crc_0 tmp_0 len_0)) ->
  (((to_uint32 x_1)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4667) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import Cbits.Cbits
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4667)":
  forall c_1 c_0 crc_1 crc_0 len_1 len_0 retres_0 : int.
  forall malloc_1 malloc_0 : map int int.
  forall mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_1 mptr_0 : map addr addr.
  forall buf_0 buf4_0 tmp_0 : addr.
  let x_0 = mint_1[tmp_0] in
  (0 <> len_0) ->
  ((framed mptr_1)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_1)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint8 x_0)) ->
  (0 <> ((land 3 ((cast tmp_0))))) ->
  ((p_galois'crc32_little'P malloc_1 mptr_1 mchar_1 mint_2 crc_1 buf_0 len_1)) ->
  ((is_uint32
     mint_1[(shift ((shift ((shift ((global g_crc_table_6697)) 0)) 0))
              ((land 255 ((to_uint32 ((lxor c_1 x_0)))))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_1
     mchar_1 mint_2 crc_1 buf_0 len_1 retres_0 c_0 buf4_0 crc_0 tmp_0 len_0)) ->
  ((valid_rd malloc_0 tmp_0 1))

end

(* ---------------------------------------------------------- *)
(* --- Preservation of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_2_preserved
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Preservation of Invariant 'galois_decorator' (generated)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 768) in
  let a_3 = (shift a_0 256) in
  let a_4 = (shift a_0 512) in
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let x_1 = len_1 - 32 in
  let a_5 = (shift buf4_1 1) in
  let x_2 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_3 = mint_2[a_6] in
  let x_4 = (to_uint32 ((lxor c_1 x_0))) in
  let x_5 = (land 255 x_4) in
  let x_6 = (lsr x_4 24) in
  let a_7 = (shift a_6 1) in
  let x_7 = mint_2[a_7] in
  let x_8 = mint_2[(shift a_1 x_6)] in
  let x_9 = mint_2[(shift a_2 x_5)] in
  let a_8 = (shift a_7 1) in
  let x_10 = mint_2[a_8] in
  let x_11 = (lsr x_4 8) in
  let x_12 = (lsr x_4 16) in
  let x_13 = mint_2[(shift a_3 ((land 255 x_12)))] in
  let x_14 = mint_2[(shift a_4 ((land 255 x_11)))] in
  let a_9 = (shift a_8 1) in
  let x_15 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_16 = mint_2[a_10] in
  let a_11 = (shift a_10 1) in
  let x_17 = mint_2[a_11] in
  let x_18 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_8
                    ((to_uint32
                       ((lxor x_13 ((to_uint32 ((lxor x_9 x_14))))))))))))))) in
  let x_19 = (land 255 x_18) in
  let x_20 = (lsr x_18 24) in
  let x_21 = mint_2[(shift a_1 x_20)] in
  let x_22 = mint_2[(shift a_2 x_19)] in
  let x_23 = (lsr x_18 8) in
  let x_24 = (lsr x_18 16) in
  let x_25 = mint_2[(shift a_3 ((land 255 x_24)))] in
  let x_26 = mint_2[(shift a_4 ((land 255 x_23)))] in
  let x_27 = (to_uint32
               ((lxor x_3
                ((to_uint32
                   ((lxor x_21
                    ((to_uint32
                       ((lxor x_25 ((to_uint32 ((lxor x_22 x_26))))))))))))))) in
  let x_28 = (land 255 x_27) in
  let x_29 = (lsr x_27 24) in
  let x_30 = mint_2[(shift a_1 x_29)] in
  let x_31 = mint_2[(shift a_2 x_28)] in
  let x_32 = (lsr x_27 8) in
  let x_33 = (lsr x_27 16) in
  let x_34 = mint_2[(shift a_3 ((land 255 x_33)))] in
  let x_35 = mint_2[(shift a_4 ((land 255 x_32)))] in
  let x_36 = (to_uint32
               ((lxor x_7
                ((to_uint32
                   ((lxor x_30
                    ((to_uint32
                       ((lxor x_34 ((to_uint32 ((lxor x_31 x_35))))))))))))))) in
  let x_37 = (land 255 x_36) in
  let x_38 = (lsr x_36 24) in
  let x_39 = mint_2[(shift a_1 x_38)] in
  let x_40 = mint_2[(shift a_2 x_37)] in
  let x_41 = (lsr x_36 8) in
  let x_42 = (lsr x_36 16) in
  let x_43 = mint_2[(shift a_3 ((land 255 x_42)))] in
  let x_44 = mint_2[(shift a_4 ((land 255 x_41)))] in
  let x_45 = (to_uint32
               ((lxor x_10
                ((to_uint32
                   ((lxor x_39
                    ((to_uint32
                       ((lxor x_43 ((to_uint32 ((lxor x_40 x_44))))))))))))))) in
  let x_46 = (land 255 x_45) in
  let x_47 = (lsr x_45 24) in
  let x_48 = mint_2[(shift a_1 x_47)] in
  let x_49 = mint_2[(shift a_2 x_46)] in
  let x_50 = (lsr x_45 8) in
  let x_51 = (lsr x_45 16) in
  let x_52 = mint_2[(shift a_3 ((land 255 x_51)))] in
  let x_53 = mint_2[(shift a_4 ((land 255 x_50)))] in
  let x_54 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_48
                    ((to_uint32
                       ((lxor x_52 ((to_uint32 ((lxor x_49 x_53))))))))))))))) in
  let x_55 = (land 255 x_54) in
  let x_56 = (lsr x_54 24) in
  let x_57 = mint_2[(shift a_1 x_56)] in
  let x_58 = mint_2[(shift a_2 x_55)] in
  let x_59 = (lsr x_54 8) in
  let x_60 = (lsr x_54 16) in
  let x_61 = mint_2[(shift a_3 ((land 255 x_60)))] in
  let x_62 = mint_2[(shift a_4 ((land 255 x_59)))] in
  let x_63 = (to_uint32
               ((lxor x_16
                ((to_uint32
                   ((lxor x_57
                    ((to_uint32
                       ((lxor x_61 ((to_uint32 ((lxor x_58 x_62))))))))))))))) in
  let x_64 = (land 255 x_63) in
  let x_65 = (lsr x_63 24) in
  let x_66 = mint_2[(shift a_1 x_65)] in
  let x_67 = mint_2[(shift a_2 x_64)] in
  let x_68 = (lsr x_63 8) in
  let x_69 = (lsr x_63 16) in
  let x_70 = mint_2[(shift a_3 ((land 255 x_69)))] in
  let x_71 = mint_2[(shift a_4 ((land 255 x_68)))] in
  let x_72 = (to_uint32
               ((lxor x_17
                ((to_uint32
                   ((lxor x_66
                    ((to_uint32
                       ((lxor x_70 ((to_uint32 ((lxor x_67 x_71))))))))))))))) in
  let x_73 = (land 255 x_72) in
  let x_74 = (lsr x_72 24) in
  let x_75 = mint_2[(shift a_1 x_74)] in
  let x_76 = mint_2[(shift a_2 x_73)] in
  let x_77 = (lsr x_72 8) in
  let x_78 = (lsr x_72 16) in
  let x_79 = mint_2[(shift a_3 ((land 255 x_78)))] in
  let x_80 = mint_2[(shift a_4 ((land 255 x_77)))] in
  (32 <= len_1) ->
  ((framed mptr_1)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_1)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_1 mchar_1 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_3)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_5)) <= 255) ->
  (((to_uint32 x_6)) <= 255) ->
  ((is_uint32 x_7)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((is_uint32 x_10)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_12)))))) <= 255) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((is_uint32 x_15)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_1
     mchar_1 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_2 mchar_2 mint_2 malloc_1 mptr_1
     mchar_1 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_16)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  ((is_uint32 x_17)) ->
  ((valid_rd malloc_2 a_11 1)) ->
  (((to_uint32 x_19)) <= 255) ->
  (((to_uint32 x_20)) <= 255) ->
  ((is_uint32 x_21)) ->
  ((is_uint32 x_22)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_23)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_24)))))) <= 255) ->
  ((is_uint32 x_25)) ->
  ((is_uint32 x_26)) ->
  (((to_uint32 x_28)) <= 255) ->
  (((to_uint32 x_29)) <= 255) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 x_31)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_32)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_33)))))) <= 255) ->
  ((is_uint32 x_34)) ->
  ((is_uint32 x_35)) ->
  (((to_uint32 x_37)) <= 255) ->
  (((to_uint32 x_38)) <= 255) ->
  ((is_uint32 x_39)) ->
  ((is_uint32 x_40)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_41)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_42)))))) <= 255) ->
  ((is_uint32 x_43)) ->
  ((is_uint32 x_44)) ->
  (((to_uint32 x_46)) <= 255) ->
  (((to_uint32 x_47)) <= 255) ->
  ((is_uint32 x_48)) ->
  ((is_uint32 x_49)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_50)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_51)))))) <= 255) ->
  ((is_uint32 x_52)) ->
  ((is_uint32 x_53)) ->
  (((to_uint32 x_55)) <= 255) ->
  (((to_uint32 x_56)) <= 255) ->
  ((is_uint32 x_57)) ->
  ((is_uint32 x_58)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_59)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_60)))))) <= 255) ->
  ((is_uint32 x_61)) ->
  ((is_uint32 x_62)) ->
  (((to_uint32 x_64)) <= 255) ->
  (((to_uint32 x_65)) <= 255) ->
  ((is_uint32 x_66)) ->
  ((is_uint32 x_67)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_68)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_69)))))) <= 255) ->
  ((is_uint32 x_70)) ->
  ((is_uint32 x_71)) ->
  (((to_uint32 x_73)) <= 255) ->
  (((to_uint32 x_74)) <= 255) ->
  ((is_uint32 x_75)) ->
  ((is_uint32 x_76)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_77)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_78)))))) <= 255) ->
  ((is_uint32 x_79)) ->
  ((is_uint32 x_80)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_2 mchar_2 mint_2 malloc_1 mptr_1
     mchar_1 mint_1 crc_2 buf_3 len_2 retres_1
     ((to_uint32
        ((lxor x_75
         ((to_uint32 ((lxor x_79 ((to_uint32 ((lxor x_76 x_80))))))))))))
     ((shift a_11 1)) crc_1 buf_2 x_1))

end

(* ---------------------------------------------------------- *)
(* --- Establishment of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_2_established
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits

goal WP "expl:Establishment of Invariant 'galois_decorator' (generated)":
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  ((framed mptr_2)) ->
  ((linked malloc_2)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((p_galois'crc32_little'P malloc_2 mptr_2 mchar_2 mint_2 crc_2 buf_2 len_2)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_2 mptr_2
     mchar_2 mint_2 crc_2 buf_2 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  (if (0 = len_0)
   then ((0 = len_1) /\ (malloc_1 = malloc_0) /\ (mchar_1 = mchar_0) /\
         (mint_1 = mint_0) /\ (mptr_1 = mptr_0) /\ (buf_1 = buf_0) /\
         (buf_1 = buf4_1) /\ (c_1 = c_0) /\ (crc_1 = crc_0) /\
         (retres_1 = retres_0))
   else ((malloc_1 = malloc_0) /\ (mchar_1 = mchar_0) /\ (mint_1 = mint_0) /\
         (mptr_1 = mptr_0) /\ (buf_1 = buf_0) /\ (buf_1 = buf4_1) /\
         (c_1 = c_0) /\ (crc_1 = crc_0) /\ (len_1 = len_0) /\
         (retres_1 = retres_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_2 mptr_2
     mchar_2 mint_2 crc_2 buf_2 len_2 retres_1 c_1 buf4_1 crc_1 buf_1 len_1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4687) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_2
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4687)":
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_3 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_0 tmp_0_0 : addr.
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 mint_3[tmp_0_0])) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_2 crc_2 buf_3 len_2)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_2 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_1 malloc_1 mptr_2
     mchar_2 mint_2 crc_2 buf_3 len_2 retres_1 c_1 tmp_0_0 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 tmp_0_0 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4689) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_2
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4689)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_8 c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1
    len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_1_0 tmp_2_0 tmp_3_0
    tmp_4_0 tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let x_1 = (to_uint32 ((lxor c_1 x_0))) in
  let x_2 = (land 255 x_1) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_1_0])) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_8 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_8 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_8 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_8)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_1 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 x_2)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_1 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_1 8)))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_2)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4689) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_3
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4689)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_8 c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1
    len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_1_0 tmp_2_0 tmp_3_0
    tmp_4_0 tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let x_1 = (to_uint32 ((lxor c_1 x_0))) in
  let x_2 = (lsr x_1 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_1_0])) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_8 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_8 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_8 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_8)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_1 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_1)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_1 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_2)))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_2)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4690) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_4
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4690)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_8 c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1
    len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_1_0 tmp_2_0 tmp_3_0
    tmp_4_0 tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let x_1 = (to_uint32 ((lxor c_1 x_0))) in
  let x_2 = (lsr x_1 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_1_0])) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_8 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_8 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_8 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_8)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_1 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_1)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_2)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_1 8)))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_2)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4690) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_5
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4690)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_8 c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1
    len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_1_0 tmp_2_0 tmp_3_0
    tmp_4_0 tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let x_1 = (to_uint32 ((lxor c_1 x_0))) in
  let x_2 = (lsr x_1 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_1_0])) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_8 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_8 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_8 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_8)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 mint_2[(shift a_1 x_2)])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_1)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_1 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_1 8)))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_2)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4695) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_3
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4695)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_8 c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1
    len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_2_0 tmp_3_0 tmp_4_0
    tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = (to_uint32 ((lxor c_1 x_0))) in
  let x_2 = (land 255 x_1) in
  let x_3 = (lsr x_1 24) in
  let x_4 = (lsr x_1 8) in
  let x_5 = (lsr x_1 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 mint_2[a_5])) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  (((to_uint32 x_2)) <= 255) ->
  (((to_uint32 x_3)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_8 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_8 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_8 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_8)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 mint_2[(shift a_1 x_3)])) ->
  ((is_uint32 mint_2[(shift a_4 x_2)])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_4)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_5)))))) <= 255) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_5)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_4)))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_5 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4697) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_6
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4697)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_2_0 tmp_3_0 tmp_4_0
    tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let x_2 = (to_uint32 ((lxor c_1 x_0))) in
  let x_3 = (land 255 x_2) in
  let x_4 = (lsr x_2 24) in
  let x_5 = mint_2[(shift a_1 x_4)] in
  let x_6 = mint_2[(shift a_4 x_3)] in
  let x_7 = (lsr x_2 8) in
  let x_8 = (lsr x_2 16) in
  let x_9 = mint_2[(shift a_2 ((land 255 x_8)))] in
  let x_10 = mint_2[(shift a_3 ((land 255 x_7)))] in
  let x_11 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_5
                    ((to_uint32 ((lxor x_9 ((to_uint32 ((lxor x_6 x_10))))))))))))))) in
  let x_12 = (land 255 x_11) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  (((to_uint32 x_3)) <= 255) ->
  (((to_uint32 x_4)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_5)) ->
  ((is_uint32 x_6)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_7)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  ((is_uint32 x_9)) ->
  ((is_uint32 x_10)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_11 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 x_12)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_11 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_11 8)))))])) ->
  (((to_uint32 x_12)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4697) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_7
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4697)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_2_0 tmp_3_0 tmp_4_0
    tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let x_2 = (to_uint32 ((lxor c_1 x_0))) in
  let x_3 = (land 255 x_2) in
  let x_4 = (lsr x_2 24) in
  let x_5 = mint_2[(shift a_1 x_4)] in
  let x_6 = mint_2[(shift a_4 x_3)] in
  let x_7 = (lsr x_2 8) in
  let x_8 = (lsr x_2 16) in
  let x_9 = mint_2[(shift a_2 ((land 255 x_8)))] in
  let x_10 = mint_2[(shift a_3 ((land 255 x_7)))] in
  let x_11 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_5
                    ((to_uint32 ((lxor x_9 ((to_uint32 ((lxor x_6 x_10))))))))))))))) in
  let x_12 = (lsr x_11 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  (((to_uint32 x_3)) <= 255) ->
  (((to_uint32 x_4)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_5)) ->
  ((is_uint32 x_6)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_7)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  ((is_uint32 x_9)) ->
  ((is_uint32 x_10)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_11 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_11)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_11 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_12)))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_12)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4698) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_8
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4698)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_2_0 tmp_3_0 tmp_4_0
    tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let x_2 = (to_uint32 ((lxor c_1 x_0))) in
  let x_3 = (land 255 x_2) in
  let x_4 = (lsr x_2 24) in
  let x_5 = mint_2[(shift a_1 x_4)] in
  let x_6 = mint_2[(shift a_4 x_3)] in
  let x_7 = (lsr x_2 8) in
  let x_8 = (lsr x_2 16) in
  let x_9 = mint_2[(shift a_2 ((land 255 x_8)))] in
  let x_10 = mint_2[(shift a_3 ((land 255 x_7)))] in
  let x_11 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_5
                    ((to_uint32 ((lxor x_9 ((to_uint32 ((lxor x_6 x_10))))))))))))))) in
  let x_12 = (lsr x_11 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  (((to_uint32 x_3)) <= 255) ->
  (((to_uint32 x_4)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_5)) ->
  ((is_uint32 x_6)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_7)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  ((is_uint32 x_9)) ->
  ((is_uint32 x_10)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_11 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_11)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_12)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_11 8)))))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_12)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4698) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_9
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4698)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_2_0 tmp_3_0 tmp_4_0
    tmp_5_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let x_2 = (to_uint32 ((lxor c_1 x_0))) in
  let x_3 = (land 255 x_2) in
  let x_4 = (lsr x_2 24) in
  let x_5 = mint_2[(shift a_1 x_4)] in
  let x_6 = mint_2[(shift a_4 x_3)] in
  let x_7 = (lsr x_2 8) in
  let x_8 = (lsr x_2 16) in
  let x_9 = mint_2[(shift a_2 ((land 255 x_8)))] in
  let x_10 = mint_2[(shift a_3 ((land 255 x_7)))] in
  let x_11 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_5
                    ((to_uint32 ((lxor x_9 ((to_uint32 ((lxor x_6 x_10))))))))))))))) in
  let x_12 = (lsr x_11 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_2_0])) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  (((to_uint32 x_3)) <= 255) ->
  (((to_uint32 x_4)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_5)) ->
  ((is_uint32 x_6)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_7)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  ((is_uint32 x_9)) ->
  ((is_uint32 x_10)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((is_uint32 mint_2[(shift a_1 x_12)])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_11)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_11 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_11 8)))))])) ->
  (((to_uint32 x_12)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4703) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_4
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4703)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_7 c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_3_0 tmp_4_0 tmp_5_0
    tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = (to_uint32 ((lxor c_1 x_0))) in
  let x_3 = (land 255 x_2) in
  let x_4 = (lsr x_2 24) in
  let x_5 = mint_2[(shift a_1 x_4)] in
  let x_6 = mint_2[(shift a_4 x_3)] in
  let x_7 = (lsr x_2 8) in
  let x_8 = (lsr x_2 16) in
  let x_9 = mint_2[(shift a_2 ((land 255 x_8)))] in
  let x_10 = mint_2[(shift a_3 ((land 255 x_7)))] in
  let x_11 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_5
                    ((to_uint32 ((lxor x_9 ((to_uint32 ((lxor x_6 x_10))))))))))))))) in
  let x_12 = (land 255 x_11) in
  let x_13 = (lsr x_11 24) in
  let x_14 = (lsr x_11 8) in
  let x_15 = (lsr x_11 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 mint_2[a_6])) ->
  (((to_uint32 x_3)) <= 255) ->
  (((to_uint32 x_4)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_7 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_7 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_7 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_7)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_5)) ->
  ((is_uint32 x_6)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_7)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  ((is_uint32 x_9)) ->
  ((is_uint32 x_10)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_12)) <= 255) ->
  (((to_uint32 x_13)) <= 255) ->
  ((is_uint32 mint_2[(shift a_1 x_13)])) ->
  ((is_uint32 mint_2[(shift a_4 x_12)])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_14)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_15)))))) <= 255) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_15)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_14)))])) ->
  ((valid_rd malloc_2 a_6 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4705) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_10
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4705)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_3_0 tmp_4_0 tmp_5_0
    tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let x_6 = mint_2[(shift a_1 x_5)] in
  let x_7 = mint_2[(shift a_4 x_4)] in
  let x_8 = (lsr x_3 8) in
  let x_9 = (lsr x_3 16) in
  let x_10 = mint_2[(shift a_2 ((land 255 x_9)))] in
  let x_11 = mint_2[(shift a_3 ((land 255 x_8)))] in
  let x_12 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_6
                    ((to_uint32
                       ((lxor x_10 ((to_uint32 ((lxor x_7 x_11))))))))))))))) in
  let x_13 = (land 255 x_12) in
  let x_14 = (lsr x_12 24) in
  let x_15 = mint_2[(shift a_1 x_14)] in
  let x_16 = mint_2[(shift a_4 x_13)] in
  let x_17 = (lsr x_12 8) in
  let x_18 = (lsr x_12 16) in
  let x_19 = mint_2[(shift a_2 ((land 255 x_18)))] in
  let x_20 = mint_2[(shift a_3 ((land 255 x_17)))] in
  let x_21 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_15
                    ((to_uint32
                       ((lxor x_19 ((to_uint32 ((lxor x_16 x_20))))))))))))))) in
  let x_22 = (land 255 x_21) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_6)) ->
  ((is_uint32 x_7)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  ((is_uint32 x_10)) ->
  ((is_uint32 x_11)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_13)) <= 255) ->
  (((to_uint32 x_14)) <= 255) ->
  ((is_uint32 x_15)) ->
  ((is_uint32 x_16)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_17)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_21 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 x_22)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_21 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_21 8)))))])) ->
  (((to_uint32 x_22)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4705) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_11
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4705)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_3_0 tmp_4_0 tmp_5_0
    tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let x_6 = mint_2[(shift a_1 x_5)] in
  let x_7 = mint_2[(shift a_4 x_4)] in
  let x_8 = (lsr x_3 8) in
  let x_9 = (lsr x_3 16) in
  let x_10 = mint_2[(shift a_2 ((land 255 x_9)))] in
  let x_11 = mint_2[(shift a_3 ((land 255 x_8)))] in
  let x_12 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_6
                    ((to_uint32
                       ((lxor x_10 ((to_uint32 ((lxor x_7 x_11))))))))))))))) in
  let x_13 = (land 255 x_12) in
  let x_14 = (lsr x_12 24) in
  let x_15 = mint_2[(shift a_1 x_14)] in
  let x_16 = mint_2[(shift a_4 x_13)] in
  let x_17 = (lsr x_12 8) in
  let x_18 = (lsr x_12 16) in
  let x_19 = mint_2[(shift a_2 ((land 255 x_18)))] in
  let x_20 = mint_2[(shift a_3 ((land 255 x_17)))] in
  let x_21 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_15
                    ((to_uint32
                       ((lxor x_19 ((to_uint32 ((lxor x_16 x_20))))))))))))))) in
  let x_22 = (lsr x_21 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_6)) ->
  ((is_uint32 x_7)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  ((is_uint32 x_10)) ->
  ((is_uint32 x_11)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_13)) <= 255) ->
  (((to_uint32 x_14)) <= 255) ->
  ((is_uint32 x_15)) ->
  ((is_uint32 x_16)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_17)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_21 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_21)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_21 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_22)))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4706) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_12
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4706)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_3_0 tmp_4_0 tmp_5_0
    tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let x_6 = mint_2[(shift a_1 x_5)] in
  let x_7 = mint_2[(shift a_4 x_4)] in
  let x_8 = (lsr x_3 8) in
  let x_9 = (lsr x_3 16) in
  let x_10 = mint_2[(shift a_2 ((land 255 x_9)))] in
  let x_11 = mint_2[(shift a_3 ((land 255 x_8)))] in
  let x_12 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_6
                    ((to_uint32
                       ((lxor x_10 ((to_uint32 ((lxor x_7 x_11))))))))))))))) in
  let x_13 = (land 255 x_12) in
  let x_14 = (lsr x_12 24) in
  let x_15 = mint_2[(shift a_1 x_14)] in
  let x_16 = mint_2[(shift a_4 x_13)] in
  let x_17 = (lsr x_12 8) in
  let x_18 = (lsr x_12 16) in
  let x_19 = mint_2[(shift a_2 ((land 255 x_18)))] in
  let x_20 = mint_2[(shift a_3 ((land 255 x_17)))] in
  let x_21 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_15
                    ((to_uint32
                       ((lxor x_19 ((to_uint32 ((lxor x_16 x_20))))))))))))))) in
  let x_22 = (lsr x_21 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_6)) ->
  ((is_uint32 x_7)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  ((is_uint32 x_10)) ->
  ((is_uint32 x_11)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_13)) <= 255) ->
  (((to_uint32 x_14)) <= 255) ->
  ((is_uint32 x_15)) ->
  ((is_uint32 x_16)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_17)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_21 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_21)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_22)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_21 8)))))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4706) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_13
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4706)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_3_0 tmp_4_0 tmp_5_0
    tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let x_6 = mint_2[(shift a_1 x_5)] in
  let x_7 = mint_2[(shift a_4 x_4)] in
  let x_8 = (lsr x_3 8) in
  let x_9 = (lsr x_3 16) in
  let x_10 = mint_2[(shift a_2 ((land 255 x_9)))] in
  let x_11 = mint_2[(shift a_3 ((land 255 x_8)))] in
  let x_12 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_6
                    ((to_uint32
                       ((lxor x_10 ((to_uint32 ((lxor x_7 x_11))))))))))))))) in
  let x_13 = (land 255 x_12) in
  let x_14 = (lsr x_12 24) in
  let x_15 = mint_2[(shift a_1 x_14)] in
  let x_16 = mint_2[(shift a_4 x_13)] in
  let x_17 = (lsr x_12 8) in
  let x_18 = (lsr x_12 16) in
  let x_19 = mint_2[(shift a_2 ((land 255 x_18)))] in
  let x_20 = mint_2[(shift a_3 ((land 255 x_17)))] in
  let x_21 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_15
                    ((to_uint32
                       ((lxor x_19 ((to_uint32 ((lxor x_16 x_20))))))))))))))) in
  let x_22 = (lsr x_21 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_3_0])) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_6)) ->
  ((is_uint32 x_7)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  ((is_uint32 x_10)) ->
  ((is_uint32 x_11)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_13)) <= 255) ->
  (((to_uint32 x_14)) <= 255) ->
  ((is_uint32 x_15)) ->
  ((is_uint32 x_16)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_17)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 mint_2[(shift a_1 x_22)])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_21)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_21 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_21 8)))))])) ->
  (((to_uint32 x_22)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4711) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_5
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4711)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_6 c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0
    retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_4_0 tmp_5_0 tmp_6_0
    tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[(shift a_1 x_5)] in
  let x_7 = mint_2[(shift a_4 x_4)] in
  let x_8 = (lsr x_3 8) in
  let x_9 = (lsr x_3 16) in
  let x_10 = mint_2[(shift a_2 ((land 255 x_9)))] in
  let x_11 = mint_2[(shift a_3 ((land 255 x_8)))] in
  let x_12 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_6
                    ((to_uint32
                       ((lxor x_10 ((to_uint32 ((lxor x_7 x_11))))))))))))))) in
  let x_13 = (land 255 x_12) in
  let x_14 = (lsr x_12 24) in
  let x_15 = mint_2[(shift a_1 x_14)] in
  let x_16 = mint_2[(shift a_4 x_13)] in
  let x_17 = (lsr x_12 8) in
  let x_18 = (lsr x_12 16) in
  let x_19 = mint_2[(shift a_2 ((land 255 x_18)))] in
  let x_20 = mint_2[(shift a_3 ((land 255 x_17)))] in
  let x_21 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_15
                    ((to_uint32
                       ((lxor x_19 ((to_uint32 ((lxor x_16 x_20))))))))))))))) in
  let x_22 = (land 255 x_21) in
  let x_23 = (lsr x_21 24) in
  let x_24 = (lsr x_21 8) in
  let x_25 = (lsr x_21 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 mint_2[a_7])) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_6 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_6 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_6 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_6)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_6)) ->
  ((is_uint32 x_7)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  ((is_uint32 x_10)) ->
  ((is_uint32 x_11)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_13)) <= 255) ->
  (((to_uint32 x_14)) <= 255) ->
  ((is_uint32 x_15)) ->
  ((is_uint32 x_16)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_17)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  (((to_uint32 x_22)) <= 255) ->
  (((to_uint32 x_23)) <= 255) ->
  ((is_uint32 mint_2[(shift a_1 x_23)])) ->
  ((is_uint32 mint_2[(shift a_4 x_22)])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_24)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_25)))))) <= 255) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_25)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_24)))])) ->
  ((valid_rd malloc_2 a_7 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4713) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_14
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4713)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_4_0 tmp_5_0 tmp_6_0
    tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let x_9 = (lsr x_3 8) in
  let x_10 = (lsr x_3 16) in
  let x_11 = mint_2[(shift a_2 ((land 255 x_10)))] in
  let x_12 = mint_2[(shift a_3 ((land 255 x_9)))] in
  let x_13 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_11 ((to_uint32 ((lxor x_8 x_12))))))))))))))) in
  let x_14 = (land 255 x_13) in
  let x_15 = (lsr x_13 24) in
  let x_16 = mint_2[(shift a_1 x_15)] in
  let x_17 = mint_2[(shift a_4 x_14)] in
  let x_18 = (lsr x_13 8) in
  let x_19 = (lsr x_13 16) in
  let x_20 = mint_2[(shift a_2 ((land 255 x_19)))] in
  let x_21 = mint_2[(shift a_3 ((land 255 x_18)))] in
  let x_22 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_16
                    ((to_uint32
                       ((lxor x_20 ((to_uint32 ((lxor x_17 x_21))))))))))))))) in
  let x_23 = (land 255 x_22) in
  let x_24 = (lsr x_22 24) in
  let x_25 = mint_2[(shift a_1 x_24)] in
  let x_26 = mint_2[(shift a_4 x_23)] in
  let x_27 = (lsr x_22 8) in
  let x_28 = (lsr x_22 16) in
  let x_29 = mint_2[(shift a_2 ((land 255 x_28)))] in
  let x_30 = mint_2[(shift a_3 ((land 255 x_27)))] in
  let x_31 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_25
                    ((to_uint32
                       ((lxor x_29 ((to_uint32 ((lxor x_26 x_30))))))))))))))) in
  let x_32 = (land 255 x_31) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  ((is_uint32 x_11)) ->
  ((is_uint32 x_12)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_14)) <= 255) ->
  (((to_uint32 x_15)) <= 255) ->
  ((is_uint32 x_16)) ->
  ((is_uint32 x_17)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 x_23)) <= 255) ->
  (((to_uint32 x_24)) <= 255) ->
  ((is_uint32 x_25)) ->
  ((is_uint32 x_26)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_27)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_31 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 x_32)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_31 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_31 8)))))])) ->
  (((to_uint32 x_32)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4713) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_15
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4713)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_4_0 tmp_5_0 tmp_6_0
    tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let x_9 = (lsr x_3 8) in
  let x_10 = (lsr x_3 16) in
  let x_11 = mint_2[(shift a_2 ((land 255 x_10)))] in
  let x_12 = mint_2[(shift a_3 ((land 255 x_9)))] in
  let x_13 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_11 ((to_uint32 ((lxor x_8 x_12))))))))))))))) in
  let x_14 = (land 255 x_13) in
  let x_15 = (lsr x_13 24) in
  let x_16 = mint_2[(shift a_1 x_15)] in
  let x_17 = mint_2[(shift a_4 x_14)] in
  let x_18 = (lsr x_13 8) in
  let x_19 = (lsr x_13 16) in
  let x_20 = mint_2[(shift a_2 ((land 255 x_19)))] in
  let x_21 = mint_2[(shift a_3 ((land 255 x_18)))] in
  let x_22 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_16
                    ((to_uint32
                       ((lxor x_20 ((to_uint32 ((lxor x_17 x_21))))))))))))))) in
  let x_23 = (land 255 x_22) in
  let x_24 = (lsr x_22 24) in
  let x_25 = mint_2[(shift a_1 x_24)] in
  let x_26 = mint_2[(shift a_4 x_23)] in
  let x_27 = (lsr x_22 8) in
  let x_28 = (lsr x_22 16) in
  let x_29 = mint_2[(shift a_2 ((land 255 x_28)))] in
  let x_30 = mint_2[(shift a_3 ((land 255 x_27)))] in
  let x_31 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_25
                    ((to_uint32
                       ((lxor x_29 ((to_uint32 ((lxor x_26 x_30))))))))))))))) in
  let x_32 = (lsr x_31 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  ((is_uint32 x_11)) ->
  ((is_uint32 x_12)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_14)) <= 255) ->
  (((to_uint32 x_15)) <= 255) ->
  ((is_uint32 x_16)) ->
  ((is_uint32 x_17)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 x_23)) <= 255) ->
  (((to_uint32 x_24)) <= 255) ->
  ((is_uint32 x_25)) ->
  ((is_uint32 x_26)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_27)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_31 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_31)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_31 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_32)))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_32)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4714) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_16
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4714)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_4_0 tmp_5_0 tmp_6_0
    tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let x_9 = (lsr x_3 8) in
  let x_10 = (lsr x_3 16) in
  let x_11 = mint_2[(shift a_2 ((land 255 x_10)))] in
  let x_12 = mint_2[(shift a_3 ((land 255 x_9)))] in
  let x_13 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_11 ((to_uint32 ((lxor x_8 x_12))))))))))))))) in
  let x_14 = (land 255 x_13) in
  let x_15 = (lsr x_13 24) in
  let x_16 = mint_2[(shift a_1 x_15)] in
  let x_17 = mint_2[(shift a_4 x_14)] in
  let x_18 = (lsr x_13 8) in
  let x_19 = (lsr x_13 16) in
  let x_20 = mint_2[(shift a_2 ((land 255 x_19)))] in
  let x_21 = mint_2[(shift a_3 ((land 255 x_18)))] in
  let x_22 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_16
                    ((to_uint32
                       ((lxor x_20 ((to_uint32 ((lxor x_17 x_21))))))))))))))) in
  let x_23 = (land 255 x_22) in
  let x_24 = (lsr x_22 24) in
  let x_25 = mint_2[(shift a_1 x_24)] in
  let x_26 = mint_2[(shift a_4 x_23)] in
  let x_27 = (lsr x_22 8) in
  let x_28 = (lsr x_22 16) in
  let x_29 = mint_2[(shift a_2 ((land 255 x_28)))] in
  let x_30 = mint_2[(shift a_3 ((land 255 x_27)))] in
  let x_31 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_25
                    ((to_uint32
                       ((lxor x_29 ((to_uint32 ((lxor x_26 x_30))))))))))))))) in
  let x_32 = (lsr x_31 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  ((is_uint32 x_11)) ->
  ((is_uint32 x_12)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_14)) <= 255) ->
  (((to_uint32 x_15)) <= 255) ->
  ((is_uint32 x_16)) ->
  ((is_uint32 x_17)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 x_23)) <= 255) ->
  (((to_uint32 x_24)) <= 255) ->
  ((is_uint32 x_25)) ->
  ((is_uint32 x_26)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_27)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_31 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_31)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_32)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_31 8)))))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_32)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4714) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_17
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4714)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_4_0 tmp_5_0 tmp_6_0
    tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let x_9 = (lsr x_3 8) in
  let x_10 = (lsr x_3 16) in
  let x_11 = mint_2[(shift a_2 ((land 255 x_10)))] in
  let x_12 = mint_2[(shift a_3 ((land 255 x_9)))] in
  let x_13 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_11 ((to_uint32 ((lxor x_8 x_12))))))))))))))) in
  let x_14 = (land 255 x_13) in
  let x_15 = (lsr x_13 24) in
  let x_16 = mint_2[(shift a_1 x_15)] in
  let x_17 = mint_2[(shift a_4 x_14)] in
  let x_18 = (lsr x_13 8) in
  let x_19 = (lsr x_13 16) in
  let x_20 = mint_2[(shift a_2 ((land 255 x_19)))] in
  let x_21 = mint_2[(shift a_3 ((land 255 x_18)))] in
  let x_22 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_16
                    ((to_uint32
                       ((lxor x_20 ((to_uint32 ((lxor x_17 x_21))))))))))))))) in
  let x_23 = (land 255 x_22) in
  let x_24 = (lsr x_22 24) in
  let x_25 = mint_2[(shift a_1 x_24)] in
  let x_26 = mint_2[(shift a_4 x_23)] in
  let x_27 = (lsr x_22 8) in
  let x_28 = (lsr x_22 16) in
  let x_29 = mint_2[(shift a_2 ((land 255 x_28)))] in
  let x_30 = mint_2[(shift a_3 ((land 255 x_27)))] in
  let x_31 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_25
                    ((to_uint32
                       ((lxor x_29 ((to_uint32 ((lxor x_26 x_30))))))))))))))) in
  let x_32 = (lsr x_31 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_4_0])) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  ((is_uint32 x_11)) ->
  ((is_uint32 x_12)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_14)) <= 255) ->
  (((to_uint32 x_15)) <= 255) ->
  ((is_uint32 x_16)) ->
  ((is_uint32 x_17)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 x_23)) <= 255) ->
  (((to_uint32 x_24)) <= 255) ->
  ((is_uint32 x_25)) ->
  ((is_uint32 x_26)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_27)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 mint_2[(shift a_1 x_32)])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_31)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_31 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_31 8)))))])) ->
  (((to_uint32 x_32)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4719) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_6
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4719)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_5 c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_5_0 tmp_6_0 tmp_7_0
    : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = (lsr x_3 8) in
  let x_10 = (lsr x_3 16) in
  let x_11 = mint_2[(shift a_2 ((land 255 x_10)))] in
  let x_12 = mint_2[(shift a_3 ((land 255 x_9)))] in
  let x_13 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_11 ((to_uint32 ((lxor x_8 x_12))))))))))))))) in
  let x_14 = (land 255 x_13) in
  let x_15 = (lsr x_13 24) in
  let x_16 = mint_2[(shift a_1 x_15)] in
  let x_17 = mint_2[(shift a_4 x_14)] in
  let x_18 = (lsr x_13 8) in
  let x_19 = (lsr x_13 16) in
  let x_20 = mint_2[(shift a_2 ((land 255 x_19)))] in
  let x_21 = mint_2[(shift a_3 ((land 255 x_18)))] in
  let x_22 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_16
                    ((to_uint32
                       ((lxor x_20 ((to_uint32 ((lxor x_17 x_21))))))))))))))) in
  let x_23 = (land 255 x_22) in
  let x_24 = (lsr x_22 24) in
  let x_25 = mint_2[(shift a_1 x_24)] in
  let x_26 = mint_2[(shift a_4 x_23)] in
  let x_27 = (lsr x_22 8) in
  let x_28 = (lsr x_22 16) in
  let x_29 = mint_2[(shift a_2 ((land 255 x_28)))] in
  let x_30 = mint_2[(shift a_3 ((land 255 x_27)))] in
  let x_31 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_25
                    ((to_uint32
                       ((lxor x_29 ((to_uint32 ((lxor x_26 x_30))))))))))))))) in
  let x_32 = (land 255 x_31) in
  let x_33 = (lsr x_31 24) in
  let x_34 = (lsr x_31 8) in
  let x_35 = (lsr x_31 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_5 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_5 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_5 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_5)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 mint_2[a_8])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_9)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  ((is_uint32 x_11)) ->
  ((is_uint32 x_12)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_14)) <= 255) ->
  (((to_uint32 x_15)) <= 255) ->
  ((is_uint32 x_16)) ->
  ((is_uint32 x_17)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_18)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 x_23)) <= 255) ->
  (((to_uint32 x_24)) <= 255) ->
  ((is_uint32 x_25)) ->
  ((is_uint32 x_26)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_27)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  (((to_uint32 x_32)) <= 255) ->
  (((to_uint32 x_33)) <= 255) ->
  ((is_uint32 mint_2[(shift a_1 x_33)])) ->
  ((is_uint32 mint_2[(shift a_4 x_32)])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_34)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_35)))))) <= 255) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_35)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_34)))])) ->
  ((valid_rd malloc_2 a_8 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4721) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_18
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4721)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_5_0 tmp_6_0 tmp_7_0
    : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let x_14 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_15 = (land 255 x_14) in
  let x_16 = (lsr x_14 24) in
  let x_17 = mint_2[(shift a_1 x_16)] in
  let x_18 = mint_2[(shift a_4 x_15)] in
  let x_19 = (lsr x_14 8) in
  let x_20 = (lsr x_14 16) in
  let x_21 = mint_2[(shift a_2 ((land 255 x_20)))] in
  let x_22 = mint_2[(shift a_3 ((land 255 x_19)))] in
  let x_23 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_17
                    ((to_uint32
                       ((lxor x_21 ((to_uint32 ((lxor x_18 x_22))))))))))))))) in
  let x_24 = (land 255 x_23) in
  let x_25 = (lsr x_23 24) in
  let x_26 = mint_2[(shift a_1 x_25)] in
  let x_27 = mint_2[(shift a_4 x_24)] in
  let x_28 = (lsr x_23 8) in
  let x_29 = (lsr x_23 16) in
  let x_30 = mint_2[(shift a_2 ((land 255 x_29)))] in
  let x_31 = mint_2[(shift a_3 ((land 255 x_28)))] in
  let x_32 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_26
                    ((to_uint32
                       ((lxor x_30 ((to_uint32 ((lxor x_27 x_31))))))))))))))) in
  let x_33 = (land 255 x_32) in
  let x_34 = (lsr x_32 24) in
  let x_35 = mint_2[(shift a_1 x_34)] in
  let x_36 = mint_2[(shift a_4 x_33)] in
  let x_37 = (lsr x_32 8) in
  let x_38 = (lsr x_32 16) in
  let x_39 = mint_2[(shift a_2 ((land 255 x_38)))] in
  let x_40 = mint_2[(shift a_3 ((land 255 x_37)))] in
  let x_41 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_35
                    ((to_uint32
                       ((lxor x_39 ((to_uint32 ((lxor x_36 x_40))))))))))))))) in
  let x_42 = (land 255 x_41) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_15)) <= 255) ->
  (((to_uint32 x_16)) <= 255) ->
  ((is_uint32 x_17)) ->
  ((is_uint32 x_18)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  ((is_uint32 x_21)) ->
  ((is_uint32 x_22)) ->
  (((to_uint32 x_24)) <= 255) ->
  (((to_uint32 x_25)) <= 255) ->
  ((is_uint32 x_26)) ->
  ((is_uint32 x_27)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 x_31)) ->
  (((to_uint32 x_33)) <= 255) ->
  (((to_uint32 x_34)) <= 255) ->
  ((is_uint32 x_35)) ->
  ((is_uint32 x_36)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_37)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  ((is_uint32 x_39)) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_41 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 x_42)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_41 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_41 8)))))])) ->
  (((to_uint32 x_42)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4721) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_19
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4721)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_5_0 tmp_6_0 tmp_7_0
    : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let x_14 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_15 = (land 255 x_14) in
  let x_16 = (lsr x_14 24) in
  let x_17 = mint_2[(shift a_1 x_16)] in
  let x_18 = mint_2[(shift a_4 x_15)] in
  let x_19 = (lsr x_14 8) in
  let x_20 = (lsr x_14 16) in
  let x_21 = mint_2[(shift a_2 ((land 255 x_20)))] in
  let x_22 = mint_2[(shift a_3 ((land 255 x_19)))] in
  let x_23 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_17
                    ((to_uint32
                       ((lxor x_21 ((to_uint32 ((lxor x_18 x_22))))))))))))))) in
  let x_24 = (land 255 x_23) in
  let x_25 = (lsr x_23 24) in
  let x_26 = mint_2[(shift a_1 x_25)] in
  let x_27 = mint_2[(shift a_4 x_24)] in
  let x_28 = (lsr x_23 8) in
  let x_29 = (lsr x_23 16) in
  let x_30 = mint_2[(shift a_2 ((land 255 x_29)))] in
  let x_31 = mint_2[(shift a_3 ((land 255 x_28)))] in
  let x_32 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_26
                    ((to_uint32
                       ((lxor x_30 ((to_uint32 ((lxor x_27 x_31))))))))))))))) in
  let x_33 = (land 255 x_32) in
  let x_34 = (lsr x_32 24) in
  let x_35 = mint_2[(shift a_1 x_34)] in
  let x_36 = mint_2[(shift a_4 x_33)] in
  let x_37 = (lsr x_32 8) in
  let x_38 = (lsr x_32 16) in
  let x_39 = mint_2[(shift a_2 ((land 255 x_38)))] in
  let x_40 = mint_2[(shift a_3 ((land 255 x_37)))] in
  let x_41 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_35
                    ((to_uint32
                       ((lxor x_39 ((to_uint32 ((lxor x_36 x_40))))))))))))))) in
  let x_42 = (lsr x_41 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_15)) <= 255) ->
  (((to_uint32 x_16)) <= 255) ->
  ((is_uint32 x_17)) ->
  ((is_uint32 x_18)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  ((is_uint32 x_21)) ->
  ((is_uint32 x_22)) ->
  (((to_uint32 x_24)) <= 255) ->
  (((to_uint32 x_25)) <= 255) ->
  ((is_uint32 x_26)) ->
  ((is_uint32 x_27)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 x_31)) ->
  (((to_uint32 x_33)) <= 255) ->
  (((to_uint32 x_34)) <= 255) ->
  ((is_uint32 x_35)) ->
  ((is_uint32 x_36)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_37)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  ((is_uint32 x_39)) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_41 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_41)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_41 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_42)))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_42)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4722) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_20
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4722)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_5_0 tmp_6_0 tmp_7_0
    : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let x_14 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_15 = (land 255 x_14) in
  let x_16 = (lsr x_14 24) in
  let x_17 = mint_2[(shift a_1 x_16)] in
  let x_18 = mint_2[(shift a_4 x_15)] in
  let x_19 = (lsr x_14 8) in
  let x_20 = (lsr x_14 16) in
  let x_21 = mint_2[(shift a_2 ((land 255 x_20)))] in
  let x_22 = mint_2[(shift a_3 ((land 255 x_19)))] in
  let x_23 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_17
                    ((to_uint32
                       ((lxor x_21 ((to_uint32 ((lxor x_18 x_22))))))))))))))) in
  let x_24 = (land 255 x_23) in
  let x_25 = (lsr x_23 24) in
  let x_26 = mint_2[(shift a_1 x_25)] in
  let x_27 = mint_2[(shift a_4 x_24)] in
  let x_28 = (lsr x_23 8) in
  let x_29 = (lsr x_23 16) in
  let x_30 = mint_2[(shift a_2 ((land 255 x_29)))] in
  let x_31 = mint_2[(shift a_3 ((land 255 x_28)))] in
  let x_32 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_26
                    ((to_uint32
                       ((lxor x_30 ((to_uint32 ((lxor x_27 x_31))))))))))))))) in
  let x_33 = (land 255 x_32) in
  let x_34 = (lsr x_32 24) in
  let x_35 = mint_2[(shift a_1 x_34)] in
  let x_36 = mint_2[(shift a_4 x_33)] in
  let x_37 = (lsr x_32 8) in
  let x_38 = (lsr x_32 16) in
  let x_39 = mint_2[(shift a_2 ((land 255 x_38)))] in
  let x_40 = mint_2[(shift a_3 ((land 255 x_37)))] in
  let x_41 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_35
                    ((to_uint32
                       ((lxor x_39 ((to_uint32 ((lxor x_36 x_40))))))))))))))) in
  let x_42 = (lsr x_41 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_15)) <= 255) ->
  (((to_uint32 x_16)) <= 255) ->
  ((is_uint32 x_17)) ->
  ((is_uint32 x_18)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  ((is_uint32 x_21)) ->
  ((is_uint32 x_22)) ->
  (((to_uint32 x_24)) <= 255) ->
  (((to_uint32 x_25)) <= 255) ->
  ((is_uint32 x_26)) ->
  ((is_uint32 x_27)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 x_31)) ->
  (((to_uint32 x_33)) <= 255) ->
  (((to_uint32 x_34)) <= 255) ->
  ((is_uint32 x_35)) ->
  ((is_uint32 x_36)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_37)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  ((is_uint32 x_39)) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_41 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_41)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_42)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_41 8)))))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_42)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4722) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_21
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4722)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_5_0 tmp_6_0 tmp_7_0
    : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let x_14 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_15 = (land 255 x_14) in
  let x_16 = (lsr x_14 24) in
  let x_17 = mint_2[(shift a_1 x_16)] in
  let x_18 = mint_2[(shift a_4 x_15)] in
  let x_19 = (lsr x_14 8) in
  let x_20 = (lsr x_14 16) in
  let x_21 = mint_2[(shift a_2 ((land 255 x_20)))] in
  let x_22 = mint_2[(shift a_3 ((land 255 x_19)))] in
  let x_23 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_17
                    ((to_uint32
                       ((lxor x_21 ((to_uint32 ((lxor x_18 x_22))))))))))))))) in
  let x_24 = (land 255 x_23) in
  let x_25 = (lsr x_23 24) in
  let x_26 = mint_2[(shift a_1 x_25)] in
  let x_27 = mint_2[(shift a_4 x_24)] in
  let x_28 = (lsr x_23 8) in
  let x_29 = (lsr x_23 16) in
  let x_30 = mint_2[(shift a_2 ((land 255 x_29)))] in
  let x_31 = mint_2[(shift a_3 ((land 255 x_28)))] in
  let x_32 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_26
                    ((to_uint32
                       ((lxor x_30 ((to_uint32 ((lxor x_27 x_31))))))))))))))) in
  let x_33 = (land 255 x_32) in
  let x_34 = (lsr x_32 24) in
  let x_35 = mint_2[(shift a_1 x_34)] in
  let x_36 = mint_2[(shift a_4 x_33)] in
  let x_37 = (lsr x_32 8) in
  let x_38 = (lsr x_32 16) in
  let x_39 = mint_2[(shift a_2 ((land 255 x_38)))] in
  let x_40 = mint_2[(shift a_3 ((land 255 x_37)))] in
  let x_41 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_35
                    ((to_uint32
                       ((lxor x_39 ((to_uint32 ((lxor x_36 x_40))))))))))))))) in
  let x_42 = (lsr x_41 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_5_0])) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_15)) <= 255) ->
  (((to_uint32 x_16)) <= 255) ->
  ((is_uint32 x_17)) ->
  ((is_uint32 x_18)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  ((is_uint32 x_21)) ->
  ((is_uint32 x_22)) ->
  (((to_uint32 x_24)) <= 255) ->
  (((to_uint32 x_25)) <= 255) ->
  ((is_uint32 x_26)) ->
  ((is_uint32 x_27)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 x_31)) ->
  (((to_uint32 x_33)) <= 255) ->
  (((to_uint32 x_34)) <= 255) ->
  ((is_uint32 x_35)) ->
  ((is_uint32 x_36)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_37)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  ((is_uint32 x_39)) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 mint_2[(shift a_1 x_42)])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_41)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_41 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_41 8)))))])) ->
  (((to_uint32 x_42)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4727) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_7
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4727)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_4 c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_15 = (land 255 x_14) in
  let x_16 = (lsr x_14 24) in
  let x_17 = mint_2[(shift a_1 x_16)] in
  let x_18 = mint_2[(shift a_4 x_15)] in
  let x_19 = (lsr x_14 8) in
  let x_20 = (lsr x_14 16) in
  let x_21 = mint_2[(shift a_2 ((land 255 x_20)))] in
  let x_22 = mint_2[(shift a_3 ((land 255 x_19)))] in
  let x_23 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_17
                    ((to_uint32
                       ((lxor x_21 ((to_uint32 ((lxor x_18 x_22))))))))))))))) in
  let x_24 = (land 255 x_23) in
  let x_25 = (lsr x_23 24) in
  let x_26 = mint_2[(shift a_1 x_25)] in
  let x_27 = mint_2[(shift a_4 x_24)] in
  let x_28 = (lsr x_23 8) in
  let x_29 = (lsr x_23 16) in
  let x_30 = mint_2[(shift a_2 ((land 255 x_29)))] in
  let x_31 = mint_2[(shift a_3 ((land 255 x_28)))] in
  let x_32 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_26
                    ((to_uint32
                       ((lxor x_30 ((to_uint32 ((lxor x_27 x_31))))))))))))))) in
  let x_33 = (land 255 x_32) in
  let x_34 = (lsr x_32 24) in
  let x_35 = mint_2[(shift a_1 x_34)] in
  let x_36 = mint_2[(shift a_4 x_33)] in
  let x_37 = (lsr x_32 8) in
  let x_38 = (lsr x_32 16) in
  let x_39 = mint_2[(shift a_2 ((land 255 x_38)))] in
  let x_40 = mint_2[(shift a_3 ((land 255 x_37)))] in
  let x_41 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_35
                    ((to_uint32
                       ((lxor x_39 ((to_uint32 ((lxor x_36 x_40))))))))))))))) in
  let x_42 = (land 255 x_41) in
  let x_43 = (lsr x_41 24) in
  let x_44 = (lsr x_41 8) in
  let x_45 = (lsr x_41 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_4 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_4 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_4 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_4)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 mint_2[a_9])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  (((to_uint32 x_15)) <= 255) ->
  (((to_uint32 x_16)) <= 255) ->
  ((is_uint32 x_17)) ->
  ((is_uint32 x_18)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_19)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  ((is_uint32 x_21)) ->
  ((is_uint32 x_22)) ->
  (((to_uint32 x_24)) <= 255) ->
  (((to_uint32 x_25)) <= 255) ->
  ((is_uint32 x_26)) ->
  ((is_uint32 x_27)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_28)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  ((is_uint32 x_30)) ->
  ((is_uint32 x_31)) ->
  (((to_uint32 x_33)) <= 255) ->
  (((to_uint32 x_34)) <= 255) ->
  ((is_uint32 x_35)) ->
  ((is_uint32 x_36)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_37)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  ((is_uint32 x_39)) ->
  ((is_uint32 x_40)) ->
  (((to_uint32 x_42)) <= 255) ->
  (((to_uint32 x_43)) <= 255) ->
  ((is_uint32 mint_2[(shift a_1 x_43)])) ->
  ((is_uint32 mint_2[(shift a_4 x_42)])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_44)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_45)))))) <= 255) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_45)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_44)))])) ->
  ((valid_rd malloc_2 a_9 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4729) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_22
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4729)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let x_15 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_16 = (land 255 x_15) in
  let x_17 = (lsr x_15 24) in
  let x_18 = mint_2[(shift a_1 x_17)] in
  let x_19 = mint_2[(shift a_4 x_16)] in
  let x_20 = (lsr x_15 8) in
  let x_21 = (lsr x_15 16) in
  let x_22 = mint_2[(shift a_2 ((land 255 x_21)))] in
  let x_23 = mint_2[(shift a_3 ((land 255 x_20)))] in
  let x_24 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_18
                    ((to_uint32
                       ((lxor x_22 ((to_uint32 ((lxor x_19 x_23))))))))))))))) in
  let x_25 = (land 255 x_24) in
  let x_26 = (lsr x_24 24) in
  let x_27 = mint_2[(shift a_1 x_26)] in
  let x_28 = mint_2[(shift a_4 x_25)] in
  let x_29 = (lsr x_24 8) in
  let x_30 = (lsr x_24 16) in
  let x_31 = mint_2[(shift a_2 ((land 255 x_30)))] in
  let x_32 = mint_2[(shift a_3 ((land 255 x_29)))] in
  let x_33 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_27
                    ((to_uint32
                       ((lxor x_31 ((to_uint32 ((lxor x_28 x_32))))))))))))))) in
  let x_34 = (land 255 x_33) in
  let x_35 = (lsr x_33 24) in
  let x_36 = mint_2[(shift a_1 x_35)] in
  let x_37 = mint_2[(shift a_4 x_34)] in
  let x_38 = (lsr x_33 8) in
  let x_39 = (lsr x_33 16) in
  let x_40 = mint_2[(shift a_2 ((land 255 x_39)))] in
  let x_41 = mint_2[(shift a_3 ((land 255 x_38)))] in
  let x_42 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_36
                    ((to_uint32
                       ((lxor x_40 ((to_uint32 ((lxor x_37 x_41))))))))))))))) in
  let x_43 = (land 255 x_42) in
  let x_44 = (lsr x_42 24) in
  let x_45 = mint_2[(shift a_1 x_44)] in
  let x_46 = mint_2[(shift a_4 x_43)] in
  let x_47 = (lsr x_42 8) in
  let x_48 = (lsr x_42 16) in
  let x_49 = mint_2[(shift a_2 ((land 255 x_48)))] in
  let x_50 = mint_2[(shift a_3 ((land 255 x_47)))] in
  let x_51 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_45
                    ((to_uint32
                       ((lxor x_49 ((to_uint32 ((lxor x_46 x_50))))))))))))))) in
  let x_52 = (land 255 x_51) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  (((to_uint32 x_16)) <= 255) ->
  (((to_uint32 x_17)) <= 255) ->
  ((is_uint32 x_18)) ->
  ((is_uint32 x_19)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  ((is_uint32 x_22)) ->
  ((is_uint32 x_23)) ->
  (((to_uint32 x_25)) <= 255) ->
  (((to_uint32 x_26)) <= 255) ->
  ((is_uint32 x_27)) ->
  ((is_uint32 x_28)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  ((is_uint32 x_31)) ->
  ((is_uint32 x_32)) ->
  (((to_uint32 x_34)) <= 255) ->
  (((to_uint32 x_35)) <= 255) ->
  ((is_uint32 x_36)) ->
  ((is_uint32 x_37)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 x_41)) ->
  (((to_uint32 x_43)) <= 255) ->
  (((to_uint32 x_44)) <= 255) ->
  ((is_uint32 x_45)) ->
  ((is_uint32 x_46)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_47)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  ((is_uint32 x_49)) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_51 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 x_52)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_51 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_51 8)))))])) ->
  (((to_uint32 x_52)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4729) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_23
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4729)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let x_15 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_16 = (land 255 x_15) in
  let x_17 = (lsr x_15 24) in
  let x_18 = mint_2[(shift a_1 x_17)] in
  let x_19 = mint_2[(shift a_4 x_16)] in
  let x_20 = (lsr x_15 8) in
  let x_21 = (lsr x_15 16) in
  let x_22 = mint_2[(shift a_2 ((land 255 x_21)))] in
  let x_23 = mint_2[(shift a_3 ((land 255 x_20)))] in
  let x_24 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_18
                    ((to_uint32
                       ((lxor x_22 ((to_uint32 ((lxor x_19 x_23))))))))))))))) in
  let x_25 = (land 255 x_24) in
  let x_26 = (lsr x_24 24) in
  let x_27 = mint_2[(shift a_1 x_26)] in
  let x_28 = mint_2[(shift a_4 x_25)] in
  let x_29 = (lsr x_24 8) in
  let x_30 = (lsr x_24 16) in
  let x_31 = mint_2[(shift a_2 ((land 255 x_30)))] in
  let x_32 = mint_2[(shift a_3 ((land 255 x_29)))] in
  let x_33 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_27
                    ((to_uint32
                       ((lxor x_31 ((to_uint32 ((lxor x_28 x_32))))))))))))))) in
  let x_34 = (land 255 x_33) in
  let x_35 = (lsr x_33 24) in
  let x_36 = mint_2[(shift a_1 x_35)] in
  let x_37 = mint_2[(shift a_4 x_34)] in
  let x_38 = (lsr x_33 8) in
  let x_39 = (lsr x_33 16) in
  let x_40 = mint_2[(shift a_2 ((land 255 x_39)))] in
  let x_41 = mint_2[(shift a_3 ((land 255 x_38)))] in
  let x_42 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_36
                    ((to_uint32
                       ((lxor x_40 ((to_uint32 ((lxor x_37 x_41))))))))))))))) in
  let x_43 = (land 255 x_42) in
  let x_44 = (lsr x_42 24) in
  let x_45 = mint_2[(shift a_1 x_44)] in
  let x_46 = mint_2[(shift a_4 x_43)] in
  let x_47 = (lsr x_42 8) in
  let x_48 = (lsr x_42 16) in
  let x_49 = mint_2[(shift a_2 ((land 255 x_48)))] in
  let x_50 = mint_2[(shift a_3 ((land 255 x_47)))] in
  let x_51 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_45
                    ((to_uint32
                       ((lxor x_49 ((to_uint32 ((lxor x_46 x_50))))))))))))))) in
  let x_52 = (lsr x_51 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  (((to_uint32 x_16)) <= 255) ->
  (((to_uint32 x_17)) <= 255) ->
  ((is_uint32 x_18)) ->
  ((is_uint32 x_19)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  ((is_uint32 x_22)) ->
  ((is_uint32 x_23)) ->
  (((to_uint32 x_25)) <= 255) ->
  (((to_uint32 x_26)) <= 255) ->
  ((is_uint32 x_27)) ->
  ((is_uint32 x_28)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  ((is_uint32 x_31)) ->
  ((is_uint32 x_32)) ->
  (((to_uint32 x_34)) <= 255) ->
  (((to_uint32 x_35)) <= 255) ->
  ((is_uint32 x_36)) ->
  ((is_uint32 x_37)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 x_41)) ->
  (((to_uint32 x_43)) <= 255) ->
  (((to_uint32 x_44)) <= 255) ->
  ((is_uint32 x_45)) ->
  ((is_uint32 x_46)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_47)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  ((is_uint32 x_49)) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_51 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_51)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_51 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_52)))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_52)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4730) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_24
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4730)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let x_15 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_16 = (land 255 x_15) in
  let x_17 = (lsr x_15 24) in
  let x_18 = mint_2[(shift a_1 x_17)] in
  let x_19 = mint_2[(shift a_4 x_16)] in
  let x_20 = (lsr x_15 8) in
  let x_21 = (lsr x_15 16) in
  let x_22 = mint_2[(shift a_2 ((land 255 x_21)))] in
  let x_23 = mint_2[(shift a_3 ((land 255 x_20)))] in
  let x_24 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_18
                    ((to_uint32
                       ((lxor x_22 ((to_uint32 ((lxor x_19 x_23))))))))))))))) in
  let x_25 = (land 255 x_24) in
  let x_26 = (lsr x_24 24) in
  let x_27 = mint_2[(shift a_1 x_26)] in
  let x_28 = mint_2[(shift a_4 x_25)] in
  let x_29 = (lsr x_24 8) in
  let x_30 = (lsr x_24 16) in
  let x_31 = mint_2[(shift a_2 ((land 255 x_30)))] in
  let x_32 = mint_2[(shift a_3 ((land 255 x_29)))] in
  let x_33 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_27
                    ((to_uint32
                       ((lxor x_31 ((to_uint32 ((lxor x_28 x_32))))))))))))))) in
  let x_34 = (land 255 x_33) in
  let x_35 = (lsr x_33 24) in
  let x_36 = mint_2[(shift a_1 x_35)] in
  let x_37 = mint_2[(shift a_4 x_34)] in
  let x_38 = (lsr x_33 8) in
  let x_39 = (lsr x_33 16) in
  let x_40 = mint_2[(shift a_2 ((land 255 x_39)))] in
  let x_41 = mint_2[(shift a_3 ((land 255 x_38)))] in
  let x_42 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_36
                    ((to_uint32
                       ((lxor x_40 ((to_uint32 ((lxor x_37 x_41))))))))))))))) in
  let x_43 = (land 255 x_42) in
  let x_44 = (lsr x_42 24) in
  let x_45 = mint_2[(shift a_1 x_44)] in
  let x_46 = mint_2[(shift a_4 x_43)] in
  let x_47 = (lsr x_42 8) in
  let x_48 = (lsr x_42 16) in
  let x_49 = mint_2[(shift a_2 ((land 255 x_48)))] in
  let x_50 = mint_2[(shift a_3 ((land 255 x_47)))] in
  let x_51 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_45
                    ((to_uint32
                       ((lxor x_49 ((to_uint32 ((lxor x_46 x_50))))))))))))))) in
  let x_52 = (lsr x_51 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  (((to_uint32 x_16)) <= 255) ->
  (((to_uint32 x_17)) <= 255) ->
  ((is_uint32 x_18)) ->
  ((is_uint32 x_19)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  ((is_uint32 x_22)) ->
  ((is_uint32 x_23)) ->
  (((to_uint32 x_25)) <= 255) ->
  (((to_uint32 x_26)) <= 255) ->
  ((is_uint32 x_27)) ->
  ((is_uint32 x_28)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  ((is_uint32 x_31)) ->
  ((is_uint32 x_32)) ->
  (((to_uint32 x_34)) <= 255) ->
  (((to_uint32 x_35)) <= 255) ->
  ((is_uint32 x_36)) ->
  ((is_uint32 x_37)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 x_41)) ->
  (((to_uint32 x_43)) <= 255) ->
  (((to_uint32 x_44)) <= 255) ->
  ((is_uint32 x_45)) ->
  ((is_uint32 x_46)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_47)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  ((is_uint32 x_49)) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_51 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_51)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_52)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_51 8)))))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_52)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4730) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_25
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4730)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_6_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let x_15 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_16 = (land 255 x_15) in
  let x_17 = (lsr x_15 24) in
  let x_18 = mint_2[(shift a_1 x_17)] in
  let x_19 = mint_2[(shift a_4 x_16)] in
  let x_20 = (lsr x_15 8) in
  let x_21 = (lsr x_15 16) in
  let x_22 = mint_2[(shift a_2 ((land 255 x_21)))] in
  let x_23 = mint_2[(shift a_3 ((land 255 x_20)))] in
  let x_24 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_18
                    ((to_uint32
                       ((lxor x_22 ((to_uint32 ((lxor x_19 x_23))))))))))))))) in
  let x_25 = (land 255 x_24) in
  let x_26 = (lsr x_24 24) in
  let x_27 = mint_2[(shift a_1 x_26)] in
  let x_28 = mint_2[(shift a_4 x_25)] in
  let x_29 = (lsr x_24 8) in
  let x_30 = (lsr x_24 16) in
  let x_31 = mint_2[(shift a_2 ((land 255 x_30)))] in
  let x_32 = mint_2[(shift a_3 ((land 255 x_29)))] in
  let x_33 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_27
                    ((to_uint32
                       ((lxor x_31 ((to_uint32 ((lxor x_28 x_32))))))))))))))) in
  let x_34 = (land 255 x_33) in
  let x_35 = (lsr x_33 24) in
  let x_36 = mint_2[(shift a_1 x_35)] in
  let x_37 = mint_2[(shift a_4 x_34)] in
  let x_38 = (lsr x_33 8) in
  let x_39 = (lsr x_33 16) in
  let x_40 = mint_2[(shift a_2 ((land 255 x_39)))] in
  let x_41 = mint_2[(shift a_3 ((land 255 x_38)))] in
  let x_42 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_36
                    ((to_uint32
                       ((lxor x_40 ((to_uint32 ((lxor x_37 x_41))))))))))))))) in
  let x_43 = (land 255 x_42) in
  let x_44 = (lsr x_42 24) in
  let x_45 = mint_2[(shift a_1 x_44)] in
  let x_46 = mint_2[(shift a_4 x_43)] in
  let x_47 = (lsr x_42 8) in
  let x_48 = (lsr x_42 16) in
  let x_49 = mint_2[(shift a_2 ((land 255 x_48)))] in
  let x_50 = mint_2[(shift a_3 ((land 255 x_47)))] in
  let x_51 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_45
                    ((to_uint32
                       ((lxor x_49 ((to_uint32 ((lxor x_46 x_50))))))))))))))) in
  let x_52 = (lsr x_51 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_6_0])) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  (((to_uint32 x_16)) <= 255) ->
  (((to_uint32 x_17)) <= 255) ->
  ((is_uint32 x_18)) ->
  ((is_uint32 x_19)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  ((is_uint32 x_22)) ->
  ((is_uint32 x_23)) ->
  (((to_uint32 x_25)) <= 255) ->
  (((to_uint32 x_26)) <= 255) ->
  ((is_uint32 x_27)) ->
  ((is_uint32 x_28)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  ((is_uint32 x_31)) ->
  ((is_uint32 x_32)) ->
  (((to_uint32 x_34)) <= 255) ->
  (((to_uint32 x_35)) <= 255) ->
  ((is_uint32 x_36)) ->
  ((is_uint32 x_37)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 x_41)) ->
  (((to_uint32 x_43)) <= 255) ->
  (((to_uint32 x_44)) <= 255) ->
  ((is_uint32 x_45)) ->
  ((is_uint32 x_46)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_47)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  ((is_uint32 x_49)) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 mint_2[(shift a_1 x_52)])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_51)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_51 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_51 8)))))])) ->
  (((to_uint32 x_52)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4735) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_8
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4735)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_3 c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1
    retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_16 = (land 255 x_15) in
  let x_17 = (lsr x_15 24) in
  let x_18 = mint_2[(shift a_1 x_17)] in
  let x_19 = mint_2[(shift a_4 x_16)] in
  let x_20 = (lsr x_15 8) in
  let x_21 = (lsr x_15 16) in
  let x_22 = mint_2[(shift a_2 ((land 255 x_21)))] in
  let x_23 = mint_2[(shift a_3 ((land 255 x_20)))] in
  let x_24 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_18
                    ((to_uint32
                       ((lxor x_22 ((to_uint32 ((lxor x_19 x_23))))))))))))))) in
  let x_25 = (land 255 x_24) in
  let x_26 = (lsr x_24 24) in
  let x_27 = mint_2[(shift a_1 x_26)] in
  let x_28 = mint_2[(shift a_4 x_25)] in
  let x_29 = (lsr x_24 8) in
  let x_30 = (lsr x_24 16) in
  let x_31 = mint_2[(shift a_2 ((land 255 x_30)))] in
  let x_32 = mint_2[(shift a_3 ((land 255 x_29)))] in
  let x_33 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_27
                    ((to_uint32
                       ((lxor x_31 ((to_uint32 ((lxor x_28 x_32))))))))))))))) in
  let x_34 = (land 255 x_33) in
  let x_35 = (lsr x_33 24) in
  let x_36 = mint_2[(shift a_1 x_35)] in
  let x_37 = mint_2[(shift a_4 x_34)] in
  let x_38 = (lsr x_33 8) in
  let x_39 = (lsr x_33 16) in
  let x_40 = mint_2[(shift a_2 ((land 255 x_39)))] in
  let x_41 = mint_2[(shift a_3 ((land 255 x_38)))] in
  let x_42 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_36
                    ((to_uint32
                       ((lxor x_40 ((to_uint32 ((lxor x_37 x_41))))))))))))))) in
  let x_43 = (land 255 x_42) in
  let x_44 = (lsr x_42 24) in
  let x_45 = mint_2[(shift a_1 x_44)] in
  let x_46 = mint_2[(shift a_4 x_43)] in
  let x_47 = (lsr x_42 8) in
  let x_48 = (lsr x_42 16) in
  let x_49 = mint_2[(shift a_2 ((land 255 x_48)))] in
  let x_50 = mint_2[(shift a_3 ((land 255 x_47)))] in
  let x_51 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_45
                    ((to_uint32
                       ((lxor x_49 ((to_uint32 ((lxor x_46 x_50))))))))))))))) in
  let x_52 = (land 255 x_51) in
  let x_53 = (lsr x_51 24) in
  let x_54 = (lsr x_51 8) in
  let x_55 = (lsr x_51 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_3 24)))])) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_3 16)))))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_3 8)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_3)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 mint_2[a_10])) ->
  (((to_uint32 x_16)) <= 255) ->
  (((to_uint32 x_17)) <= 255) ->
  ((is_uint32 x_18)) ->
  ((is_uint32 x_19)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_20)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  ((is_uint32 x_22)) ->
  ((is_uint32 x_23)) ->
  (((to_uint32 x_25)) <= 255) ->
  (((to_uint32 x_26)) <= 255) ->
  ((is_uint32 x_27)) ->
  ((is_uint32 x_28)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_29)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  ((is_uint32 x_31)) ->
  ((is_uint32 x_32)) ->
  (((to_uint32 x_34)) <= 255) ->
  (((to_uint32 x_35)) <= 255) ->
  ((is_uint32 x_36)) ->
  ((is_uint32 x_37)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_38)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  ((is_uint32 x_40)) ->
  ((is_uint32 x_41)) ->
  (((to_uint32 x_43)) <= 255) ->
  (((to_uint32 x_44)) <= 255) ->
  ((is_uint32 x_45)) ->
  ((is_uint32 x_46)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_47)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  ((is_uint32 x_49)) ->
  ((is_uint32 x_50)) ->
  (((to_uint32 x_52)) <= 255) ->
  (((to_uint32 x_53)) <= 255) ->
  ((is_uint32 mint_2[(shift a_1 x_53)])) ->
  ((is_uint32 mint_2[(shift a_4 x_52)])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_54)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_55)))))) <= 255) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_55)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_54)))])) ->
  ((valid_rd malloc_2 a_10 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4737) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_26
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4737)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0
    : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let x_16 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_17 = (land 255 x_16) in
  let x_18 = (lsr x_16 24) in
  let x_19 = mint_2[(shift a_1 x_18)] in
  let x_20 = mint_2[(shift a_4 x_17)] in
  let x_21 = (lsr x_16 8) in
  let x_22 = (lsr x_16 16) in
  let x_23 = mint_2[(shift a_2 ((land 255 x_22)))] in
  let x_24 = mint_2[(shift a_3 ((land 255 x_21)))] in
  let x_25 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_19
                    ((to_uint32
                       ((lxor x_23 ((to_uint32 ((lxor x_20 x_24))))))))))))))) in
  let x_26 = (land 255 x_25) in
  let x_27 = (lsr x_25 24) in
  let x_28 = mint_2[(shift a_1 x_27)] in
  let x_29 = mint_2[(shift a_4 x_26)] in
  let x_30 = (lsr x_25 8) in
  let x_31 = (lsr x_25 16) in
  let x_32 = mint_2[(shift a_2 ((land 255 x_31)))] in
  let x_33 = mint_2[(shift a_3 ((land 255 x_30)))] in
  let x_34 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_28
                    ((to_uint32
                       ((lxor x_32 ((to_uint32 ((lxor x_29 x_33))))))))))))))) in
  let x_35 = (land 255 x_34) in
  let x_36 = (lsr x_34 24) in
  let x_37 = mint_2[(shift a_1 x_36)] in
  let x_38 = mint_2[(shift a_4 x_35)] in
  let x_39 = (lsr x_34 8) in
  let x_40 = (lsr x_34 16) in
  let x_41 = mint_2[(shift a_2 ((land 255 x_40)))] in
  let x_42 = mint_2[(shift a_3 ((land 255 x_39)))] in
  let x_43 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_37
                    ((to_uint32
                       ((lxor x_41 ((to_uint32 ((lxor x_38 x_42))))))))))))))) in
  let x_44 = (land 255 x_43) in
  let x_45 = (lsr x_43 24) in
  let x_46 = mint_2[(shift a_1 x_45)] in
  let x_47 = mint_2[(shift a_4 x_44)] in
  let x_48 = (lsr x_43 8) in
  let x_49 = (lsr x_43 16) in
  let x_50 = mint_2[(shift a_2 ((land 255 x_49)))] in
  let x_51 = mint_2[(shift a_3 ((land 255 x_48)))] in
  let x_52 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_46
                    ((to_uint32
                       ((lxor x_50 ((to_uint32 ((lxor x_47 x_51))))))))))))))) in
  let x_53 = (land 255 x_52) in
  let x_54 = (lsr x_52 24) in
  let x_55 = mint_2[(shift a_1 x_54)] in
  let x_56 = mint_2[(shift a_4 x_53)] in
  let x_57 = (lsr x_52 8) in
  let x_58 = (lsr x_52 16) in
  let x_59 = mint_2[(shift a_2 ((land 255 x_58)))] in
  let x_60 = mint_2[(shift a_3 ((land 255 x_57)))] in
  let x_61 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_55
                    ((to_uint32
                       ((lxor x_59 ((to_uint32 ((lxor x_56 x_60))))))))))))))) in
  let x_62 = (land 255 x_61) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  (((to_uint32 x_17)) <= 255) ->
  (((to_uint32 x_18)) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  ((is_uint32 x_23)) ->
  ((is_uint32 x_24)) ->
  (((to_uint32 x_26)) <= 255) ->
  (((to_uint32 x_27)) <= 255) ->
  ((is_uint32 x_28)) ->
  ((is_uint32 x_29)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  ((is_uint32 x_32)) ->
  ((is_uint32 x_33)) ->
  (((to_uint32 x_35)) <= 255) ->
  (((to_uint32 x_36)) <= 255) ->
  ((is_uint32 x_37)) ->
  ((is_uint32 x_38)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  ((is_uint32 x_41)) ->
  ((is_uint32 x_42)) ->
  (((to_uint32 x_44)) <= 255) ->
  (((to_uint32 x_45)) <= 255) ->
  ((is_uint32 x_46)) ->
  ((is_uint32 x_47)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 x_51)) ->
  (((to_uint32 x_53)) <= 255) ->
  (((to_uint32 x_54)) <= 255) ->
  ((is_uint32 x_55)) ->
  ((is_uint32 x_56)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_57)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  ((is_uint32 x_59)) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_61 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 x_62)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_61 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_61 8)))))])) ->
  (((to_uint32 x_62)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4737) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_27
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4737)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0
    : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let x_16 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_17 = (land 255 x_16) in
  let x_18 = (lsr x_16 24) in
  let x_19 = mint_2[(shift a_1 x_18)] in
  let x_20 = mint_2[(shift a_4 x_17)] in
  let x_21 = (lsr x_16 8) in
  let x_22 = (lsr x_16 16) in
  let x_23 = mint_2[(shift a_2 ((land 255 x_22)))] in
  let x_24 = mint_2[(shift a_3 ((land 255 x_21)))] in
  let x_25 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_19
                    ((to_uint32
                       ((lxor x_23 ((to_uint32 ((lxor x_20 x_24))))))))))))))) in
  let x_26 = (land 255 x_25) in
  let x_27 = (lsr x_25 24) in
  let x_28 = mint_2[(shift a_1 x_27)] in
  let x_29 = mint_2[(shift a_4 x_26)] in
  let x_30 = (lsr x_25 8) in
  let x_31 = (lsr x_25 16) in
  let x_32 = mint_2[(shift a_2 ((land 255 x_31)))] in
  let x_33 = mint_2[(shift a_3 ((land 255 x_30)))] in
  let x_34 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_28
                    ((to_uint32
                       ((lxor x_32 ((to_uint32 ((lxor x_29 x_33))))))))))))))) in
  let x_35 = (land 255 x_34) in
  let x_36 = (lsr x_34 24) in
  let x_37 = mint_2[(shift a_1 x_36)] in
  let x_38 = mint_2[(shift a_4 x_35)] in
  let x_39 = (lsr x_34 8) in
  let x_40 = (lsr x_34 16) in
  let x_41 = mint_2[(shift a_2 ((land 255 x_40)))] in
  let x_42 = mint_2[(shift a_3 ((land 255 x_39)))] in
  let x_43 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_37
                    ((to_uint32
                       ((lxor x_41 ((to_uint32 ((lxor x_38 x_42))))))))))))))) in
  let x_44 = (land 255 x_43) in
  let x_45 = (lsr x_43 24) in
  let x_46 = mint_2[(shift a_1 x_45)] in
  let x_47 = mint_2[(shift a_4 x_44)] in
  let x_48 = (lsr x_43 8) in
  let x_49 = (lsr x_43 16) in
  let x_50 = mint_2[(shift a_2 ((land 255 x_49)))] in
  let x_51 = mint_2[(shift a_3 ((land 255 x_48)))] in
  let x_52 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_46
                    ((to_uint32
                       ((lxor x_50 ((to_uint32 ((lxor x_47 x_51))))))))))))))) in
  let x_53 = (land 255 x_52) in
  let x_54 = (lsr x_52 24) in
  let x_55 = mint_2[(shift a_1 x_54)] in
  let x_56 = mint_2[(shift a_4 x_53)] in
  let x_57 = (lsr x_52 8) in
  let x_58 = (lsr x_52 16) in
  let x_59 = mint_2[(shift a_2 ((land 255 x_58)))] in
  let x_60 = mint_2[(shift a_3 ((land 255 x_57)))] in
  let x_61 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_55
                    ((to_uint32
                       ((lxor x_59 ((to_uint32 ((lxor x_56 x_60))))))))))))))) in
  let x_62 = (lsr x_61 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  (((to_uint32 x_17)) <= 255) ->
  (((to_uint32 x_18)) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  ((is_uint32 x_23)) ->
  ((is_uint32 x_24)) ->
  (((to_uint32 x_26)) <= 255) ->
  (((to_uint32 x_27)) <= 255) ->
  ((is_uint32 x_28)) ->
  ((is_uint32 x_29)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  ((is_uint32 x_32)) ->
  ((is_uint32 x_33)) ->
  (((to_uint32 x_35)) <= 255) ->
  (((to_uint32 x_36)) <= 255) ->
  ((is_uint32 x_37)) ->
  ((is_uint32 x_38)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  ((is_uint32 x_41)) ->
  ((is_uint32 x_42)) ->
  (((to_uint32 x_44)) <= 255) ->
  (((to_uint32 x_45)) <= 255) ->
  ((is_uint32 x_46)) ->
  ((is_uint32 x_47)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 x_51)) ->
  (((to_uint32 x_53)) <= 255) ->
  (((to_uint32 x_54)) <= 255) ->
  ((is_uint32 x_55)) ->
  ((is_uint32 x_56)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_57)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  ((is_uint32 x_59)) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_61 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_61)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_61 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_62)))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_62)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4738) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_28
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4738)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0
    : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let x_16 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_17 = (land 255 x_16) in
  let x_18 = (lsr x_16 24) in
  let x_19 = mint_2[(shift a_1 x_18)] in
  let x_20 = mint_2[(shift a_4 x_17)] in
  let x_21 = (lsr x_16 8) in
  let x_22 = (lsr x_16 16) in
  let x_23 = mint_2[(shift a_2 ((land 255 x_22)))] in
  let x_24 = mint_2[(shift a_3 ((land 255 x_21)))] in
  let x_25 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_19
                    ((to_uint32
                       ((lxor x_23 ((to_uint32 ((lxor x_20 x_24))))))))))))))) in
  let x_26 = (land 255 x_25) in
  let x_27 = (lsr x_25 24) in
  let x_28 = mint_2[(shift a_1 x_27)] in
  let x_29 = mint_2[(shift a_4 x_26)] in
  let x_30 = (lsr x_25 8) in
  let x_31 = (lsr x_25 16) in
  let x_32 = mint_2[(shift a_2 ((land 255 x_31)))] in
  let x_33 = mint_2[(shift a_3 ((land 255 x_30)))] in
  let x_34 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_28
                    ((to_uint32
                       ((lxor x_32 ((to_uint32 ((lxor x_29 x_33))))))))))))))) in
  let x_35 = (land 255 x_34) in
  let x_36 = (lsr x_34 24) in
  let x_37 = mint_2[(shift a_1 x_36)] in
  let x_38 = mint_2[(shift a_4 x_35)] in
  let x_39 = (lsr x_34 8) in
  let x_40 = (lsr x_34 16) in
  let x_41 = mint_2[(shift a_2 ((land 255 x_40)))] in
  let x_42 = mint_2[(shift a_3 ((land 255 x_39)))] in
  let x_43 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_37
                    ((to_uint32
                       ((lxor x_41 ((to_uint32 ((lxor x_38 x_42))))))))))))))) in
  let x_44 = (land 255 x_43) in
  let x_45 = (lsr x_43 24) in
  let x_46 = mint_2[(shift a_1 x_45)] in
  let x_47 = mint_2[(shift a_4 x_44)] in
  let x_48 = (lsr x_43 8) in
  let x_49 = (lsr x_43 16) in
  let x_50 = mint_2[(shift a_2 ((land 255 x_49)))] in
  let x_51 = mint_2[(shift a_3 ((land 255 x_48)))] in
  let x_52 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_46
                    ((to_uint32
                       ((lxor x_50 ((to_uint32 ((lxor x_47 x_51))))))))))))))) in
  let x_53 = (land 255 x_52) in
  let x_54 = (lsr x_52 24) in
  let x_55 = mint_2[(shift a_1 x_54)] in
  let x_56 = mint_2[(shift a_4 x_53)] in
  let x_57 = (lsr x_52 8) in
  let x_58 = (lsr x_52 16) in
  let x_59 = mint_2[(shift a_2 ((land 255 x_58)))] in
  let x_60 = mint_2[(shift a_3 ((land 255 x_57)))] in
  let x_61 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_55
                    ((to_uint32
                       ((lxor x_59 ((to_uint32 ((lxor x_56 x_60))))))))))))))) in
  let x_62 = (lsr x_61 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  (((to_uint32 x_17)) <= 255) ->
  (((to_uint32 x_18)) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  ((is_uint32 x_23)) ->
  ((is_uint32 x_24)) ->
  (((to_uint32 x_26)) <= 255) ->
  (((to_uint32 x_27)) <= 255) ->
  ((is_uint32 x_28)) ->
  ((is_uint32 x_29)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  ((is_uint32 x_32)) ->
  ((is_uint32 x_33)) ->
  (((to_uint32 x_35)) <= 255) ->
  (((to_uint32 x_36)) <= 255) ->
  ((is_uint32 x_37)) ->
  ((is_uint32 x_38)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  ((is_uint32 x_41)) ->
  ((is_uint32 x_42)) ->
  (((to_uint32 x_44)) <= 255) ->
  (((to_uint32 x_45)) <= 255) ->
  ((is_uint32 x_46)) ->
  ((is_uint32 x_47)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 x_51)) ->
  (((to_uint32 x_53)) <= 255) ->
  (((to_uint32 x_54)) <= 255) ->
  ((is_uint32 x_55)) ->
  ((is_uint32 x_56)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_57)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  ((is_uint32 x_59)) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_61 24)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_61)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_62)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_61 8)))))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_62)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4738) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_29
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4738)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0
    : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_7_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let x_16 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_17 = (land 255 x_16) in
  let x_18 = (lsr x_16 24) in
  let x_19 = mint_2[(shift a_1 x_18)] in
  let x_20 = mint_2[(shift a_4 x_17)] in
  let x_21 = (lsr x_16 8) in
  let x_22 = (lsr x_16 16) in
  let x_23 = mint_2[(shift a_2 ((land 255 x_22)))] in
  let x_24 = mint_2[(shift a_3 ((land 255 x_21)))] in
  let x_25 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_19
                    ((to_uint32
                       ((lxor x_23 ((to_uint32 ((lxor x_20 x_24))))))))))))))) in
  let x_26 = (land 255 x_25) in
  let x_27 = (lsr x_25 24) in
  let x_28 = mint_2[(shift a_1 x_27)] in
  let x_29 = mint_2[(shift a_4 x_26)] in
  let x_30 = (lsr x_25 8) in
  let x_31 = (lsr x_25 16) in
  let x_32 = mint_2[(shift a_2 ((land 255 x_31)))] in
  let x_33 = mint_2[(shift a_3 ((land 255 x_30)))] in
  let x_34 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_28
                    ((to_uint32
                       ((lxor x_32 ((to_uint32 ((lxor x_29 x_33))))))))))))))) in
  let x_35 = (land 255 x_34) in
  let x_36 = (lsr x_34 24) in
  let x_37 = mint_2[(shift a_1 x_36)] in
  let x_38 = mint_2[(shift a_4 x_35)] in
  let x_39 = (lsr x_34 8) in
  let x_40 = (lsr x_34 16) in
  let x_41 = mint_2[(shift a_2 ((land 255 x_40)))] in
  let x_42 = mint_2[(shift a_3 ((land 255 x_39)))] in
  let x_43 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_37
                    ((to_uint32
                       ((lxor x_41 ((to_uint32 ((lxor x_38 x_42))))))))))))))) in
  let x_44 = (land 255 x_43) in
  let x_45 = (lsr x_43 24) in
  let x_46 = mint_2[(shift a_1 x_45)] in
  let x_47 = mint_2[(shift a_4 x_44)] in
  let x_48 = (lsr x_43 8) in
  let x_49 = (lsr x_43 16) in
  let x_50 = mint_2[(shift a_2 ((land 255 x_49)))] in
  let x_51 = mint_2[(shift a_3 ((land 255 x_48)))] in
  let x_52 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_46
                    ((to_uint32
                       ((lxor x_50 ((to_uint32 ((lxor x_47 x_51))))))))))))))) in
  let x_53 = (land 255 x_52) in
  let x_54 = (lsr x_52 24) in
  let x_55 = mint_2[(shift a_1 x_54)] in
  let x_56 = mint_2[(shift a_4 x_53)] in
  let x_57 = (lsr x_52 8) in
  let x_58 = (lsr x_52 16) in
  let x_59 = mint_2[(shift a_2 ((land 255 x_58)))] in
  let x_60 = mint_2[(shift a_3 ((land 255 x_57)))] in
  let x_61 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_55
                    ((to_uint32
                       ((lxor x_59 ((to_uint32 ((lxor x_56 x_60))))))))))))))) in
  let x_62 = (lsr x_61 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((is_uint32 mint_2[tmp_7_0])) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  (((to_uint32 x_17)) <= 255) ->
  (((to_uint32 x_18)) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  ((is_uint32 x_23)) ->
  ((is_uint32 x_24)) ->
  (((to_uint32 x_26)) <= 255) ->
  (((to_uint32 x_27)) <= 255) ->
  ((is_uint32 x_28)) ->
  ((is_uint32 x_29)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  ((is_uint32 x_32)) ->
  ((is_uint32 x_33)) ->
  (((to_uint32 x_35)) <= 255) ->
  (((to_uint32 x_36)) <= 255) ->
  ((is_uint32 x_37)) ->
  ((is_uint32 x_38)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  ((is_uint32 x_41)) ->
  ((is_uint32 x_42)) ->
  (((to_uint32 x_44)) <= 255) ->
  (((to_uint32 x_45)) <= 255) ->
  ((is_uint32 x_46)) ->
  ((is_uint32 x_47)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 x_51)) ->
  (((to_uint32 x_53)) <= 255) ->
  (((to_uint32 x_54)) <= 255) ->
  ((is_uint32 x_55)) ->
  ((is_uint32 x_56)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_57)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  ((is_uint32 x_59)) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 mint_2[(shift a_1 x_62)])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_61)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr x_61 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_61 8)))))])) ->
  (((to_uint32 x_62)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4743) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_9
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4743)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 256) in
  let a_3 = (shift a_0 512) in
  let a_4 = (shift a_0 768) in
  forall c_2 c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0
    : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_4 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_2 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_3 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let a_11 = (shift a_10 1) in
  let x_16 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_17 = (land 255 x_16) in
  let x_18 = (lsr x_16 24) in
  let x_19 = mint_2[(shift a_1 x_18)] in
  let x_20 = mint_2[(shift a_4 x_17)] in
  let x_21 = (lsr x_16 8) in
  let x_22 = (lsr x_16 16) in
  let x_23 = mint_2[(shift a_2 ((land 255 x_22)))] in
  let x_24 = mint_2[(shift a_3 ((land 255 x_21)))] in
  let x_25 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_19
                    ((to_uint32
                       ((lxor x_23 ((to_uint32 ((lxor x_20 x_24))))))))))))))) in
  let x_26 = (land 255 x_25) in
  let x_27 = (lsr x_25 24) in
  let x_28 = mint_2[(shift a_1 x_27)] in
  let x_29 = mint_2[(shift a_4 x_26)] in
  let x_30 = (lsr x_25 8) in
  let x_31 = (lsr x_25 16) in
  let x_32 = mint_2[(shift a_2 ((land 255 x_31)))] in
  let x_33 = mint_2[(shift a_3 ((land 255 x_30)))] in
  let x_34 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_28
                    ((to_uint32
                       ((lxor x_32 ((to_uint32 ((lxor x_29 x_33))))))))))))))) in
  let x_35 = (land 255 x_34) in
  let x_36 = (lsr x_34 24) in
  let x_37 = mint_2[(shift a_1 x_36)] in
  let x_38 = mint_2[(shift a_4 x_35)] in
  let x_39 = (lsr x_34 8) in
  let x_40 = (lsr x_34 16) in
  let x_41 = mint_2[(shift a_2 ((land 255 x_40)))] in
  let x_42 = mint_2[(shift a_3 ((land 255 x_39)))] in
  let x_43 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_37
                    ((to_uint32
                       ((lxor x_41 ((to_uint32 ((lxor x_38 x_42))))))))))))))) in
  let x_44 = (land 255 x_43) in
  let x_45 = (lsr x_43 24) in
  let x_46 = mint_2[(shift a_1 x_45)] in
  let x_47 = mint_2[(shift a_4 x_44)] in
  let x_48 = (lsr x_43 8) in
  let x_49 = (lsr x_43 16) in
  let x_50 = mint_2[(shift a_2 ((land 255 x_49)))] in
  let x_51 = mint_2[(shift a_3 ((land 255 x_48)))] in
  let x_52 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_46
                    ((to_uint32
                       ((lxor x_50 ((to_uint32 ((lxor x_47 x_51))))))))))))))) in
  let x_53 = (land 255 x_52) in
  let x_54 = (lsr x_52 24) in
  let x_55 = mint_2[(shift a_1 x_54)] in
  let x_56 = mint_2[(shift a_4 x_53)] in
  let x_57 = (lsr x_52 8) in
  let x_58 = (lsr x_52 16) in
  let x_59 = mint_2[(shift a_2 ((land 255 x_58)))] in
  let x_60 = mint_2[(shift a_3 ((land 255 x_57)))] in
  let x_61 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_55
                    ((to_uint32
                       ((lxor x_59 ((to_uint32 ((lxor x_56 x_60))))))))))))))) in
  let x_62 = (land 255 x_61) in
  let x_63 = (lsr x_61 24) in
  let x_64 = (lsr x_61 8) in
  let x_65 = (lsr x_61 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr c_2 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 ((lsr c_2 16)))))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr c_2 8)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 c_2)))])) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  ((is_uint32 mint_2[a_11])) ->
  (((to_uint32 x_17)) <= 255) ->
  (((to_uint32 x_18)) <= 255) ->
  ((is_uint32 x_19)) ->
  ((is_uint32 x_20)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_21)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  ((is_uint32 x_23)) ->
  ((is_uint32 x_24)) ->
  (((to_uint32 x_26)) <= 255) ->
  (((to_uint32 x_27)) <= 255) ->
  ((is_uint32 x_28)) ->
  ((is_uint32 x_29)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_30)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  ((is_uint32 x_32)) ->
  ((is_uint32 x_33)) ->
  (((to_uint32 x_35)) <= 255) ->
  (((to_uint32 x_36)) <= 255) ->
  ((is_uint32 x_37)) ->
  ((is_uint32 x_38)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_39)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  ((is_uint32 x_41)) ->
  ((is_uint32 x_42)) ->
  (((to_uint32 x_44)) <= 255) ->
  (((to_uint32 x_45)) <= 255) ->
  ((is_uint32 x_46)) ->
  ((is_uint32 x_47)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_48)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  ((is_uint32 x_50)) ->
  ((is_uint32 x_51)) ->
  (((to_uint32 x_53)) <= 255) ->
  (((to_uint32 x_54)) <= 255) ->
  ((is_uint32 x_55)) ->
  ((is_uint32 x_56)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_57)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  ((is_uint32 x_59)) ->
  ((is_uint32 x_60)) ->
  (((to_uint32 x_62)) <= 255) ->
  (((to_uint32 x_63)) <= 255) ->
  ((is_uint32 mint_2[(shift a_1 x_63)])) ->
  ((is_uint32 mint_2[(shift a_4 x_62)])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_64)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_65)))))) <= 255) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_65)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_64)))])) ->
  ((valid_rd malloc_2 a_11 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4745) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_30
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4745)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 768) in
  let a_3 = (shift a_0 256) in
  let a_4 = (shift a_0 512) in
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_2 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_3 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_4 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let a_11 = (shift a_10 1) in
  let x_16 = mint_2[a_11] in
  let x_17 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_18 = (land 255 x_17) in
  let x_19 = (lsr x_17 24) in
  let x_20 = mint_2[(shift a_1 x_19)] in
  let x_21 = mint_2[(shift a_2 x_18)] in
  let x_22 = (lsr x_17 8) in
  let x_23 = (lsr x_17 16) in
  let x_24 = mint_2[(shift a_3 ((land 255 x_23)))] in
  let x_25 = mint_2[(shift a_4 ((land 255 x_22)))] in
  let x_26 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_20
                    ((to_uint32
                       ((lxor x_24 ((to_uint32 ((lxor x_21 x_25))))))))))))))) in
  let x_27 = (land 255 x_26) in
  let x_28 = (lsr x_26 24) in
  let x_29 = mint_2[(shift a_1 x_28)] in
  let x_30 = mint_2[(shift a_2 x_27)] in
  let x_31 = (lsr x_26 8) in
  let x_32 = (lsr x_26 16) in
  let x_33 = mint_2[(shift a_3 ((land 255 x_32)))] in
  let x_34 = mint_2[(shift a_4 ((land 255 x_31)))] in
  let x_35 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_29
                    ((to_uint32
                       ((lxor x_33 ((to_uint32 ((lxor x_30 x_34))))))))))))))) in
  let x_36 = (land 255 x_35) in
  let x_37 = (lsr x_35 24) in
  let x_38 = mint_2[(shift a_1 x_37)] in
  let x_39 = mint_2[(shift a_2 x_36)] in
  let x_40 = (lsr x_35 8) in
  let x_41 = (lsr x_35 16) in
  let x_42 = mint_2[(shift a_3 ((land 255 x_41)))] in
  let x_43 = mint_2[(shift a_4 ((land 255 x_40)))] in
  let x_44 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_38
                    ((to_uint32
                       ((lxor x_42 ((to_uint32 ((lxor x_39 x_43))))))))))))))) in
  let x_45 = (land 255 x_44) in
  let x_46 = (lsr x_44 24) in
  let x_47 = mint_2[(shift a_1 x_46)] in
  let x_48 = mint_2[(shift a_2 x_45)] in
  let x_49 = (lsr x_44 8) in
  let x_50 = (lsr x_44 16) in
  let x_51 = mint_2[(shift a_3 ((land 255 x_50)))] in
  let x_52 = mint_2[(shift a_4 ((land 255 x_49)))] in
  let x_53 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_47
                    ((to_uint32
                       ((lxor x_51 ((to_uint32 ((lxor x_48 x_52))))))))))))))) in
  let x_54 = (land 255 x_53) in
  let x_55 = (lsr x_53 24) in
  let x_56 = mint_2[(shift a_1 x_55)] in
  let x_57 = mint_2[(shift a_2 x_54)] in
  let x_58 = (lsr x_53 8) in
  let x_59 = (lsr x_53 16) in
  let x_60 = mint_2[(shift a_3 ((land 255 x_59)))] in
  let x_61 = mint_2[(shift a_4 ((land 255 x_58)))] in
  let x_62 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_56
                    ((to_uint32
                       ((lxor x_60 ((to_uint32 ((lxor x_57 x_61))))))))))))))) in
  let x_63 = (land 255 x_62) in
  let x_64 = (lsr x_62 24) in
  let x_65 = mint_2[(shift a_1 x_64)] in
  let x_66 = mint_2[(shift a_2 x_63)] in
  let x_67 = (lsr x_62 8) in
  let x_68 = (lsr x_62 16) in
  let x_69 = mint_2[(shift a_3 ((land 255 x_68)))] in
  let x_70 = mint_2[(shift a_4 ((land 255 x_67)))] in
  let x_71 = (to_uint32
               ((lxor x_16
                ((to_uint32
                   ((lxor x_65
                    ((to_uint32
                       ((lxor x_69 ((to_uint32 ((lxor x_66 x_70))))))))))))))) in
  let x_72 = (land 255 x_71) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  ((is_uint32 x_16)) ->
  ((valid_rd malloc_2 a_11 1)) ->
  (((to_uint32 x_18)) <= 255) ->
  (((to_uint32 x_19)) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_23)))))) <= 255) ->
  ((is_uint32 x_24)) ->
  ((is_uint32 x_25)) ->
  (((to_uint32 x_27)) <= 255) ->
  (((to_uint32 x_28)) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_32)))))) <= 255) ->
  ((is_uint32 x_33)) ->
  ((is_uint32 x_34)) ->
  (((to_uint32 x_36)) <= 255) ->
  (((to_uint32 x_37)) <= 255) ->
  ((is_uint32 x_38)) ->
  ((is_uint32 x_39)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_41)))))) <= 255) ->
  ((is_uint32 x_42)) ->
  ((is_uint32 x_43)) ->
  (((to_uint32 x_45)) <= 255) ->
  (((to_uint32 x_46)) <= 255) ->
  ((is_uint32 x_47)) ->
  ((is_uint32 x_48)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_50)))))) <= 255) ->
  ((is_uint32 x_51)) ->
  ((is_uint32 x_52)) ->
  (((to_uint32 x_54)) <= 255) ->
  (((to_uint32 x_55)) <= 255) ->
  ((is_uint32 x_56)) ->
  ((is_uint32 x_57)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_59)))))) <= 255) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 x_61)) ->
  (((to_uint32 x_63)) <= 255) ->
  (((to_uint32 x_64)) <= 255) ->
  ((is_uint32 x_65)) ->
  ((is_uint32 x_66)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_67)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_68)))))) <= 255) ->
  ((is_uint32 x_69)) ->
  ((is_uint32 x_70)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_71 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 x_72)])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_71 16)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 ((lsr x_71 8)))))])) ->
  (((to_uint32 x_72)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4745) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_31
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4745)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 768) in
  let a_3 = (shift a_0 256) in
  let a_4 = (shift a_0 512) in
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_2 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_3 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_4 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let a_11 = (shift a_10 1) in
  let x_16 = mint_2[a_11] in
  let x_17 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_18 = (land 255 x_17) in
  let x_19 = (lsr x_17 24) in
  let x_20 = mint_2[(shift a_1 x_19)] in
  let x_21 = mint_2[(shift a_2 x_18)] in
  let x_22 = (lsr x_17 8) in
  let x_23 = (lsr x_17 16) in
  let x_24 = mint_2[(shift a_3 ((land 255 x_23)))] in
  let x_25 = mint_2[(shift a_4 ((land 255 x_22)))] in
  let x_26 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_20
                    ((to_uint32
                       ((lxor x_24 ((to_uint32 ((lxor x_21 x_25))))))))))))))) in
  let x_27 = (land 255 x_26) in
  let x_28 = (lsr x_26 24) in
  let x_29 = mint_2[(shift a_1 x_28)] in
  let x_30 = mint_2[(shift a_2 x_27)] in
  let x_31 = (lsr x_26 8) in
  let x_32 = (lsr x_26 16) in
  let x_33 = mint_2[(shift a_3 ((land 255 x_32)))] in
  let x_34 = mint_2[(shift a_4 ((land 255 x_31)))] in
  let x_35 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_29
                    ((to_uint32
                       ((lxor x_33 ((to_uint32 ((lxor x_30 x_34))))))))))))))) in
  let x_36 = (land 255 x_35) in
  let x_37 = (lsr x_35 24) in
  let x_38 = mint_2[(shift a_1 x_37)] in
  let x_39 = mint_2[(shift a_2 x_36)] in
  let x_40 = (lsr x_35 8) in
  let x_41 = (lsr x_35 16) in
  let x_42 = mint_2[(shift a_3 ((land 255 x_41)))] in
  let x_43 = mint_2[(shift a_4 ((land 255 x_40)))] in
  let x_44 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_38
                    ((to_uint32
                       ((lxor x_42 ((to_uint32 ((lxor x_39 x_43))))))))))))))) in
  let x_45 = (land 255 x_44) in
  let x_46 = (lsr x_44 24) in
  let x_47 = mint_2[(shift a_1 x_46)] in
  let x_48 = mint_2[(shift a_2 x_45)] in
  let x_49 = (lsr x_44 8) in
  let x_50 = (lsr x_44 16) in
  let x_51 = mint_2[(shift a_3 ((land 255 x_50)))] in
  let x_52 = mint_2[(shift a_4 ((land 255 x_49)))] in
  let x_53 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_47
                    ((to_uint32
                       ((lxor x_51 ((to_uint32 ((lxor x_48 x_52))))))))))))))) in
  let x_54 = (land 255 x_53) in
  let x_55 = (lsr x_53 24) in
  let x_56 = mint_2[(shift a_1 x_55)] in
  let x_57 = mint_2[(shift a_2 x_54)] in
  let x_58 = (lsr x_53 8) in
  let x_59 = (lsr x_53 16) in
  let x_60 = mint_2[(shift a_3 ((land 255 x_59)))] in
  let x_61 = mint_2[(shift a_4 ((land 255 x_58)))] in
  let x_62 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_56
                    ((to_uint32
                       ((lxor x_60 ((to_uint32 ((lxor x_57 x_61))))))))))))))) in
  let x_63 = (land 255 x_62) in
  let x_64 = (lsr x_62 24) in
  let x_65 = mint_2[(shift a_1 x_64)] in
  let x_66 = mint_2[(shift a_2 x_63)] in
  let x_67 = (lsr x_62 8) in
  let x_68 = (lsr x_62 16) in
  let x_69 = mint_2[(shift a_3 ((land 255 x_68)))] in
  let x_70 = mint_2[(shift a_4 ((land 255 x_67)))] in
  let x_71 = (to_uint32
               ((lxor x_16
                ((to_uint32
                   ((lxor x_65
                    ((to_uint32
                       ((lxor x_69 ((to_uint32 ((lxor x_66 x_70))))))))))))))) in
  let x_72 = (lsr x_71 8) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  ((is_uint32 x_16)) ->
  ((valid_rd malloc_2 a_11 1)) ->
  (((to_uint32 x_18)) <= 255) ->
  (((to_uint32 x_19)) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_23)))))) <= 255) ->
  ((is_uint32 x_24)) ->
  ((is_uint32 x_25)) ->
  (((to_uint32 x_27)) <= 255) ->
  (((to_uint32 x_28)) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_32)))))) <= 255) ->
  ((is_uint32 x_33)) ->
  ((is_uint32 x_34)) ->
  (((to_uint32 x_36)) <= 255) ->
  (((to_uint32 x_37)) <= 255) ->
  ((is_uint32 x_38)) ->
  ((is_uint32 x_39)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_41)))))) <= 255) ->
  ((is_uint32 x_42)) ->
  ((is_uint32 x_43)) ->
  (((to_uint32 x_45)) <= 255) ->
  (((to_uint32 x_46)) <= 255) ->
  ((is_uint32 x_47)) ->
  ((is_uint32 x_48)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_50)))))) <= 255) ->
  ((is_uint32 x_51)) ->
  ((is_uint32 x_52)) ->
  (((to_uint32 x_54)) <= 255) ->
  (((to_uint32 x_55)) <= 255) ->
  ((is_uint32 x_56)) ->
  ((is_uint32 x_57)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_59)))))) <= 255) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 x_61)) ->
  (((to_uint32 x_63)) <= 255) ->
  (((to_uint32 x_64)) <= 255) ->
  ((is_uint32 x_65)) ->
  ((is_uint32 x_66)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_67)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_68)))))) <= 255) ->
  ((is_uint32 x_69)) ->
  ((is_uint32 x_70)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_71 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_71)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_71 16)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 x_72)))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_72)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4746) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_32
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4746)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 768) in
  let a_3 = (shift a_0 256) in
  let a_4 = (shift a_0 512) in
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_2 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_3 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_4 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let a_11 = (shift a_10 1) in
  let x_16 = mint_2[a_11] in
  let x_17 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_18 = (land 255 x_17) in
  let x_19 = (lsr x_17 24) in
  let x_20 = mint_2[(shift a_1 x_19)] in
  let x_21 = mint_2[(shift a_2 x_18)] in
  let x_22 = (lsr x_17 8) in
  let x_23 = (lsr x_17 16) in
  let x_24 = mint_2[(shift a_3 ((land 255 x_23)))] in
  let x_25 = mint_2[(shift a_4 ((land 255 x_22)))] in
  let x_26 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_20
                    ((to_uint32
                       ((lxor x_24 ((to_uint32 ((lxor x_21 x_25))))))))))))))) in
  let x_27 = (land 255 x_26) in
  let x_28 = (lsr x_26 24) in
  let x_29 = mint_2[(shift a_1 x_28)] in
  let x_30 = mint_2[(shift a_2 x_27)] in
  let x_31 = (lsr x_26 8) in
  let x_32 = (lsr x_26 16) in
  let x_33 = mint_2[(shift a_3 ((land 255 x_32)))] in
  let x_34 = mint_2[(shift a_4 ((land 255 x_31)))] in
  let x_35 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_29
                    ((to_uint32
                       ((lxor x_33 ((to_uint32 ((lxor x_30 x_34))))))))))))))) in
  let x_36 = (land 255 x_35) in
  let x_37 = (lsr x_35 24) in
  let x_38 = mint_2[(shift a_1 x_37)] in
  let x_39 = mint_2[(shift a_2 x_36)] in
  let x_40 = (lsr x_35 8) in
  let x_41 = (lsr x_35 16) in
  let x_42 = mint_2[(shift a_3 ((land 255 x_41)))] in
  let x_43 = mint_2[(shift a_4 ((land 255 x_40)))] in
  let x_44 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_38
                    ((to_uint32
                       ((lxor x_42 ((to_uint32 ((lxor x_39 x_43))))))))))))))) in
  let x_45 = (land 255 x_44) in
  let x_46 = (lsr x_44 24) in
  let x_47 = mint_2[(shift a_1 x_46)] in
  let x_48 = mint_2[(shift a_2 x_45)] in
  let x_49 = (lsr x_44 8) in
  let x_50 = (lsr x_44 16) in
  let x_51 = mint_2[(shift a_3 ((land 255 x_50)))] in
  let x_52 = mint_2[(shift a_4 ((land 255 x_49)))] in
  let x_53 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_47
                    ((to_uint32
                       ((lxor x_51 ((to_uint32 ((lxor x_48 x_52))))))))))))))) in
  let x_54 = (land 255 x_53) in
  let x_55 = (lsr x_53 24) in
  let x_56 = mint_2[(shift a_1 x_55)] in
  let x_57 = mint_2[(shift a_2 x_54)] in
  let x_58 = (lsr x_53 8) in
  let x_59 = (lsr x_53 16) in
  let x_60 = mint_2[(shift a_3 ((land 255 x_59)))] in
  let x_61 = mint_2[(shift a_4 ((land 255 x_58)))] in
  let x_62 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_56
                    ((to_uint32
                       ((lxor x_60 ((to_uint32 ((lxor x_57 x_61))))))))))))))) in
  let x_63 = (land 255 x_62) in
  let x_64 = (lsr x_62 24) in
  let x_65 = mint_2[(shift a_1 x_64)] in
  let x_66 = mint_2[(shift a_2 x_63)] in
  let x_67 = (lsr x_62 8) in
  let x_68 = (lsr x_62 16) in
  let x_69 = mint_2[(shift a_3 ((land 255 x_68)))] in
  let x_70 = mint_2[(shift a_4 ((land 255 x_67)))] in
  let x_71 = (to_uint32
               ((lxor x_16
                ((to_uint32
                   ((lxor x_65
                    ((to_uint32
                       ((lxor x_69 ((to_uint32 ((lxor x_66 x_70))))))))))))))) in
  let x_72 = (lsr x_71 16) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  ((is_uint32 x_16)) ->
  ((valid_rd malloc_2 a_11 1)) ->
  (((to_uint32 x_18)) <= 255) ->
  (((to_uint32 x_19)) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_23)))))) <= 255) ->
  ((is_uint32 x_24)) ->
  ((is_uint32 x_25)) ->
  (((to_uint32 x_27)) <= 255) ->
  (((to_uint32 x_28)) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_32)))))) <= 255) ->
  ((is_uint32 x_33)) ->
  ((is_uint32 x_34)) ->
  (((to_uint32 x_36)) <= 255) ->
  (((to_uint32 x_37)) <= 255) ->
  ((is_uint32 x_38)) ->
  ((is_uint32 x_39)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_41)))))) <= 255) ->
  ((is_uint32 x_42)) ->
  ((is_uint32 x_43)) ->
  (((to_uint32 x_45)) <= 255) ->
  (((to_uint32 x_46)) <= 255) ->
  ((is_uint32 x_47)) ->
  ((is_uint32 x_48)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_50)))))) <= 255) ->
  ((is_uint32 x_51)) ->
  ((is_uint32 x_52)) ->
  (((to_uint32 x_54)) <= 255) ->
  (((to_uint32 x_55)) <= 255) ->
  ((is_uint32 x_56)) ->
  ((is_uint32 x_57)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_59)))))) <= 255) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 x_61)) ->
  (((to_uint32 x_63)) <= 255) ->
  (((to_uint32 x_64)) <= 255) ->
  ((is_uint32 x_65)) ->
  ((is_uint32 x_66)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_67)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_68)))))) <= 255) ->
  ((is_uint32 x_69)) ->
  ((is_uint32 x_70)) ->
  ((is_uint32 mint_2[(shift a_1 ((lsr x_71 24)))])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_71)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 x_72)))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 ((lsr x_71 8)))))])) ->
  (((to_uint32 ((land 255 ((to_uint32 x_72)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4746) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_33
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4746)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 768) in
  let a_3 = (shift a_0 256) in
  let a_4 = (shift a_0 512) in
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_1] in
  let a_5 = (shift buf4_1 1) in
  let x_1 = mint_2[a_5] in
  let a_6 = (shift a_5 1) in
  let x_2 = mint_2[a_6] in
  let x_3 = (to_uint32 ((lxor c_1 x_0))) in
  let x_4 = (land 255 x_3) in
  let x_5 = (lsr x_3 24) in
  let a_7 = (shift a_6 1) in
  let x_6 = mint_2[a_7] in
  let x_7 = mint_2[(shift a_1 x_5)] in
  let x_8 = mint_2[(shift a_2 x_4)] in
  let a_8 = (shift a_7 1) in
  let x_9 = mint_2[a_8] in
  let x_10 = (lsr x_3 8) in
  let x_11 = (lsr x_3 16) in
  let x_12 = mint_2[(shift a_3 ((land 255 x_11)))] in
  let x_13 = mint_2[(shift a_4 ((land 255 x_10)))] in
  let a_9 = (shift a_8 1) in
  let x_14 = mint_2[a_9] in
  let a_10 = (shift a_9 1) in
  let x_15 = mint_2[a_10] in
  let a_11 = (shift a_10 1) in
  let x_16 = mint_2[a_11] in
  let x_17 = (to_uint32
               ((lxor x_1
                ((to_uint32
                   ((lxor x_7
                    ((to_uint32
                       ((lxor x_12 ((to_uint32 ((lxor x_8 x_13))))))))))))))) in
  let x_18 = (land 255 x_17) in
  let x_19 = (lsr x_17 24) in
  let x_20 = mint_2[(shift a_1 x_19)] in
  let x_21 = mint_2[(shift a_2 x_18)] in
  let x_22 = (lsr x_17 8) in
  let x_23 = (lsr x_17 16) in
  let x_24 = mint_2[(shift a_3 ((land 255 x_23)))] in
  let x_25 = mint_2[(shift a_4 ((land 255 x_22)))] in
  let x_26 = (to_uint32
               ((lxor x_2
                ((to_uint32
                   ((lxor x_20
                    ((to_uint32
                       ((lxor x_24 ((to_uint32 ((lxor x_21 x_25))))))))))))))) in
  let x_27 = (land 255 x_26) in
  let x_28 = (lsr x_26 24) in
  let x_29 = mint_2[(shift a_1 x_28)] in
  let x_30 = mint_2[(shift a_2 x_27)] in
  let x_31 = (lsr x_26 8) in
  let x_32 = (lsr x_26 16) in
  let x_33 = mint_2[(shift a_3 ((land 255 x_32)))] in
  let x_34 = mint_2[(shift a_4 ((land 255 x_31)))] in
  let x_35 = (to_uint32
               ((lxor x_6
                ((to_uint32
                   ((lxor x_29
                    ((to_uint32
                       ((lxor x_33 ((to_uint32 ((lxor x_30 x_34))))))))))))))) in
  let x_36 = (land 255 x_35) in
  let x_37 = (lsr x_35 24) in
  let x_38 = mint_2[(shift a_1 x_37)] in
  let x_39 = mint_2[(shift a_2 x_36)] in
  let x_40 = (lsr x_35 8) in
  let x_41 = (lsr x_35 16) in
  let x_42 = mint_2[(shift a_3 ((land 255 x_41)))] in
  let x_43 = mint_2[(shift a_4 ((land 255 x_40)))] in
  let x_44 = (to_uint32
               ((lxor x_9
                ((to_uint32
                   ((lxor x_38
                    ((to_uint32
                       ((lxor x_42 ((to_uint32 ((lxor x_39 x_43))))))))))))))) in
  let x_45 = (land 255 x_44) in
  let x_46 = (lsr x_44 24) in
  let x_47 = mint_2[(shift a_1 x_46)] in
  let x_48 = mint_2[(shift a_2 x_45)] in
  let x_49 = (lsr x_44 8) in
  let x_50 = (lsr x_44 16) in
  let x_51 = mint_2[(shift a_3 ((land 255 x_50)))] in
  let x_52 = mint_2[(shift a_4 ((land 255 x_49)))] in
  let x_53 = (to_uint32
               ((lxor x_14
                ((to_uint32
                   ((lxor x_47
                    ((to_uint32
                       ((lxor x_51 ((to_uint32 ((lxor x_48 x_52))))))))))))))) in
  let x_54 = (land 255 x_53) in
  let x_55 = (lsr x_53 24) in
  let x_56 = mint_2[(shift a_1 x_55)] in
  let x_57 = mint_2[(shift a_2 x_54)] in
  let x_58 = (lsr x_53 8) in
  let x_59 = (lsr x_53 16) in
  let x_60 = mint_2[(shift a_3 ((land 255 x_59)))] in
  let x_61 = mint_2[(shift a_4 ((land 255 x_58)))] in
  let x_62 = (to_uint32
               ((lxor x_15
                ((to_uint32
                   ((lxor x_56
                    ((to_uint32
                       ((lxor x_60 ((to_uint32 ((lxor x_57 x_61))))))))))))))) in
  let x_63 = (land 255 x_62) in
  let x_64 = (lsr x_62 24) in
  let x_65 = mint_2[(shift a_1 x_64)] in
  let x_66 = mint_2[(shift a_2 x_63)] in
  let x_67 = (lsr x_62 8) in
  let x_68 = (lsr x_62 16) in
  let x_69 = mint_2[(shift a_3 ((land 255 x_68)))] in
  let x_70 = mint_2[(shift a_4 ((land 255 x_67)))] in
  let x_71 = (to_uint32
               ((lxor x_16
                ((to_uint32
                   ((lxor x_65
                    ((to_uint32
                       ((lxor x_69 ((to_uint32 ((lxor x_66 x_70))))))))))))))) in
  let x_72 = (lsr x_71 24) in
  (32 <= len_1) ->
  ((framed mptr_2)) ->
  ((linked malloc_1)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_1 1)) ->
  ((is_uint32 x_1)) ->
  ((valid_rd malloc_2 a_5 1)) ->
  ((p_galois'crc32_little'P malloc_1 mptr_2 mchar_2 mint_1 crc_2 buf_3 len_2)) ->
  ((is_uint32 x_2)) ->
  ((valid_rd malloc_2 a_6 1)) ->
  (((to_uint32 x_4)) <= 255) ->
  (((to_uint32 x_5)) <= 255) ->
  ((is_uint32 x_6)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((valid_rd malloc_2 a_7 1)) ->
  ((is_uint32 x_7)) ->
  ((is_uint32 x_8)) ->
  ((is_uint32 x_9)) ->
  ((valid_rd malloc_2 a_8 1)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_10)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_11)))))) <= 255) ->
  ((is_uint32 x_12)) ->
  ((is_uint32 x_13)) ->
  ((is_uint32 x_14)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_2 mptr_1 mchar_1 mint_2 malloc_1 mptr_2
     mchar_2 mint_1 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((valid_rd malloc_2 a_9 1)) ->
  ((is_uint32 x_15)) ->
  ((valid_rd malloc_2 a_10 1)) ->
  ((is_uint32 x_16)) ->
  ((valid_rd malloc_2 a_11 1)) ->
  (((to_uint32 x_18)) <= 255) ->
  (((to_uint32 x_19)) <= 255) ->
  ((is_uint32 x_20)) ->
  ((is_uint32 x_21)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_22)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_23)))))) <= 255) ->
  ((is_uint32 x_24)) ->
  ((is_uint32 x_25)) ->
  (((to_uint32 x_27)) <= 255) ->
  (((to_uint32 x_28)) <= 255) ->
  ((is_uint32 x_29)) ->
  ((is_uint32 x_30)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_31)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_32)))))) <= 255) ->
  ((is_uint32 x_33)) ->
  ((is_uint32 x_34)) ->
  (((to_uint32 x_36)) <= 255) ->
  (((to_uint32 x_37)) <= 255) ->
  ((is_uint32 x_38)) ->
  ((is_uint32 x_39)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_40)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_41)))))) <= 255) ->
  ((is_uint32 x_42)) ->
  ((is_uint32 x_43)) ->
  (((to_uint32 x_45)) <= 255) ->
  (((to_uint32 x_46)) <= 255) ->
  ((is_uint32 x_47)) ->
  ((is_uint32 x_48)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_49)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_50)))))) <= 255) ->
  ((is_uint32 x_51)) ->
  ((is_uint32 x_52)) ->
  (((to_uint32 x_54)) <= 255) ->
  (((to_uint32 x_55)) <= 255) ->
  ((is_uint32 x_56)) ->
  ((is_uint32 x_57)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_58)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_59)))))) <= 255) ->
  ((is_uint32 x_60)) ->
  ((is_uint32 x_61)) ->
  (((to_uint32 x_63)) <= 255) ->
  (((to_uint32 x_64)) <= 255) ->
  ((is_uint32 x_65)) ->
  ((is_uint32 x_66)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_67)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_68)))))) <= 255) ->
  ((is_uint32 x_69)) ->
  ((is_uint32 x_70)) ->
  ((is_uint32 mint_2[(shift a_1 x_72)])) ->
  ((is_uint32 mint_2[(shift a_2 ((land 255 x_71)))])) ->
  ((is_uint32 mint_2[(shift a_3 ((land 255 ((lsr x_71 16)))))])) ->
  ((is_uint32 mint_2[(shift a_4 ((land 255 ((lsr x_71 8)))))])) ->
  (((to_uint32 x_72)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Preservation of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_3_preserved
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Preservation of Invariant 'galois_decorator' (generated)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  let a_1 = (shift a_0 0) in
  let a_2 = (shift a_0 768) in
  let a_3 = (shift a_0 256) in
  let a_4 = (shift a_0 512) in
  forall c_2 c_1 c_0 crc_3 crc_2 crc_1 crc_0 len_3 len_2 len_1 len_0 retres_2
    retres_1 retres_0 : int.
  forall malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_3 mchar_2 mchar_1 mchar_0 mint_3 mint_2 mint_1 mint_0
    : map addr int.
  forall mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_2 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_2] in
  let x_1 = len_2 - 4 in
  let x_2 = (to_uint32 ((lxor c_2 x_0))) in
  let x_3 = (land 255 x_2) in
  let x_4 = (lsr x_2 24) in
  let x_5 = mint_2[(shift a_1 x_4)] in
  let x_6 = mint_2[(shift a_2 x_3)] in
  let x_7 = (lsr x_2 8) in
  let x_8 = (lsr x_2 16) in
  let x_9 = mint_2[(shift a_3 ((land 255 x_8)))] in
  let x_10 = mint_2[(shift a_4 ((land 255 x_7)))] in
  (4 <= len_2) ->
  (len_1 <= 31) ->
  ((framed mptr_3)) ->
  ((linked malloc_3)) ->
  ((sconst mchar_3)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_2 1)) ->
  ((is_uint32 x_1)) ->
  ((p_galois'crc32_little'P malloc_3 mptr_3 mchar_3 mint_3 crc_3 buf_4 len_3)) ->
  (((to_uint32 x_3)) <= 255) ->
  (((to_uint32 x_4)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 x_5)) ->
  ((is_uint32 x_6)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_7)))))) <= 255) ->
  (((to_uint32 ((land 255 ((to_uint32 x_8)))))) <= 255) ->
  ((is_uint32 x_9)) ->
  ((is_uint32 x_10)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_2
     ((to_uint32
        ((lxor x_5
         ((to_uint32 ((lxor x_9 ((to_uint32 ((lxor x_6 x_10))))))))))))
     ((shift buf4_2 1)) crc_2 buf_3 x_1))

end

(* ---------------------------------------------------------- *)
(* --- Establishment of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_3_established
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits

goal WP "expl:Establishment of Invariant 'galois_decorator' (generated)":
  forall c_1 c_0 crc_2 crc_1 crc_0 len_2 len_1 len_0 retres_1 retres_0 : int.
  forall malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_2 mchar_1 mchar_0 mint_2 mint_1 mint_0 : map addr int.
  forall mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  (len_1 <= 31) ->
  ((framed mptr_2)) ->
  ((linked malloc_2)) ->
  ((sconst mchar_2)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((p_galois'crc32_little'P malloc_2 mptr_2 mchar_2 mint_2 crc_2 buf_3 len_2)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_2 mptr_2
     mchar_2 mint_2 crc_2 buf_3 len_2 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_2 mptr_2
     mchar_2 mint_2 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_1 mptr_1 mchar_1 mint_1 malloc_2 mptr_2
     mchar_2 mint_2 crc_2 buf_3 len_2 retres_1 c_1 buf4_1 crc_1 buf_2 len_1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4755) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_10
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4755)":
  forall c_2 c_1 c_0 crc_3 crc_2 crc_1 crc_0 len_3 len_2 len_1 len_0 retres_2
    retres_1 retres_0 : int.
  forall malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_3 mchar_2 mchar_1 mchar_0 mint_4 mint_3 mint_2 mint_1 mint_0
    : map addr int.
  forall mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 tmp_8_0 : addr.
  (4 <= len_2) ->
  (len_1 <= 31) ->
  ((framed mptr_3)) ->
  ((linked malloc_3)) ->
  ((sconst mchar_3)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 mint_3[tmp_8_0])) ->
  ((p_galois'crc32_little'P malloc_3 mptr_3 mchar_3 mint_4 crc_3 buf_4 len_3)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_3 mptr_3
     mchar_3 mint_4 crc_3 buf_4 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_3 mptr_3
     mchar_3 mint_4 crc_3 buf_4 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_4 crc_3 buf_4 len_3 retres_2 c_2 tmp_8_0 crc_2 buf_3 len_2)) ->
  ((valid_rd malloc_2 tmp_8_0 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4757) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_34
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4757)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  forall c_2 c_1 c_0 crc_3 crc_2 crc_1 crc_0 len_3 len_2 len_1 len_0 retres_2
    retres_1 retres_0 : int.
  forall malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_3 mchar_2 mchar_1 mchar_0 mint_3 mint_2 mint_1 mint_0
    : map addr int.
  forall mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_2 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_2] in
  let x_1 = (to_uint32 ((lxor c_2 x_0))) in
  let x_2 = (land 255 x_1) in
  (4 <= len_2) ->
  (len_1 <= 31) ->
  ((framed mptr_3)) ->
  ((linked malloc_3)) ->
  ((sconst mchar_3)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_2 1)) ->
  ((p_galois'crc32_little'P malloc_3 mptr_3 mchar_3 mint_3 crc_3 buf_4 len_3)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift ((shift a_0 0)) ((lsr x_1 24)))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 768)) x_2)])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 256)) ((land 255 ((lsr x_1 16)))))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 512)) ((land 255 ((lsr x_1 8)))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  (((to_uint32 x_2)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4757) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_35
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4757)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  forall c_2 c_1 c_0 crc_3 crc_2 crc_1 crc_0 len_3 len_2 len_1 len_0 retres_2
    retres_1 retres_0 : int.
  forall malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_3 mchar_2 mchar_1 mchar_0 mint_3 mint_2 mint_1 mint_0
    : map addr int.
  forall mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_2 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_2] in
  let x_1 = (to_uint32 ((lxor c_2 x_0))) in
  let x_2 = (lsr x_1 8) in
  (4 <= len_2) ->
  (len_1 <= 31) ->
  ((framed mptr_3)) ->
  ((linked malloc_3)) ->
  ((sconst mchar_3)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_2 1)) ->
  ((p_galois'crc32_little'P malloc_3 mptr_3 mchar_3 mint_3 crc_3 buf_4 len_3)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift ((shift a_0 0)) ((lsr x_1 24)))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 768)) ((land 255 x_1)))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 256)) ((land 255 ((lsr x_1 16)))))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 512)) ((land 255 x_2)))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_2)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4758) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_36
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4758)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  forall c_2 c_1 c_0 crc_3 crc_2 crc_1 crc_0 len_3 len_2 len_1 len_0 retres_2
    retres_1 retres_0 : int.
  forall malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_3 mchar_2 mchar_1 mchar_0 mint_3 mint_2 mint_1 mint_0
    : map addr int.
  forall mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_2 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_2] in
  let x_1 = (to_uint32 ((lxor c_2 x_0))) in
  let x_2 = (lsr x_1 16) in
  (4 <= len_2) ->
  (len_1 <= 31) ->
  ((framed mptr_3)) ->
  ((linked malloc_3)) ->
  ((sconst mchar_3)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_2 1)) ->
  ((p_galois'crc32_little'P malloc_3 mptr_3 mchar_3 mint_3 crc_3 buf_4 len_3)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift ((shift a_0 0)) ((lsr x_1 24)))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 768)) ((land 255 x_1)))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 256)) ((land 255 x_2)))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 512)) ((land 255 ((lsr x_1 8)))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  (((to_uint32 ((land 255 ((to_uint32 x_2)))))) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4758) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_37
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4758)":
  let a_0 = (shift ((global g_crc_table_6697)) 0) in
  forall c_2 c_1 c_0 crc_3 crc_2 crc_1 crc_0 len_3 len_2 len_1 len_0 retres_2
    retres_1 retres_0 : int.
  forall malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_3 mchar_2 mchar_1 mchar_0 mint_3 mint_2 mint_1 mint_0
    : map addr int.
  forall mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_2 buf4_1 buf4_0 : addr.
  let x_0 = mint_2[buf4_2] in
  let x_1 = (to_uint32 ((lxor c_2 x_0))) in
  let x_2 = (lsr x_1 24) in
  (4 <= len_2) ->
  (len_1 <= 31) ->
  ((framed mptr_3)) ->
  ((linked malloc_3)) ->
  ((sconst mchar_3)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint32 x_0)) ->
  ((valid_rd malloc_2 buf4_2 1)) ->
  ((p_galois'crc32_little'P malloc_3 mptr_3 mchar_3 mint_3 crc_3 buf_4 len_3)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 mint_2[(shift ((shift a_0 0)) x_2)])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 768)) ((land 255 x_1)))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 256)) ((land 255 ((lsr x_1 16)))))])) ->
  ((is_uint32 mint_2[(shift ((shift a_0 512)) ((land 255 ((lsr x_1 8)))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_4 len_3 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  (((to_uint32 x_2)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Preservation of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_4_preserved
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Preservation of Invariant 'galois_decorator' (generated)":
  let a_0 = (shift ((shift ((global g_crc_table_6697)) 0)) 0) in
  forall c_3 c_2 c_1 c_0 crc_4 crc_3 crc_2 crc_1 crc_0 len_4 len_3 len_2
    len_1 len_0 retres_3 retres_2 retres_1 retres_0 : int.
  forall malloc_4 malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_4 mchar_3 mchar_2 mchar_1 mchar_0 mint_4 mint_3 mint_2 mint_1
    mint_0 : map addr int.
  forall mptr_4 mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_5 buf_4 buf_3 buf_2 buf_1 buf_0 buf4_3 buf4_2 buf4_1 buf4_0
    : addr.
  let x_0 = mint_3[buf_4] in
  let x_1 = len_3 - 1 in
  let x_2 = (land 255 ((to_uint32 ((lxor c_3 x_0))))) in
  let x_3 = mint_3[(shift a_0 x_2)] in
  (0 <> len_2) ->
  (1 <> len_3) ->
  (len_2 <= 3) ->
  (len_1 <= 31) ->
  ((framed mptr_4)) ->
  ((linked malloc_4)) ->
  ((sconst mchar_4)) ->
  ((is_uint64 crc_4)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_3)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_3)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_4)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint8 x_0)) ->
  ((valid_rd malloc_3 buf_4 1)) ->
  ((is_uint32 x_1)) ->
  ((p_galois'crc32_little'P malloc_4 mptr_4 mchar_4 mint_4 crc_4 buf_5 len_4)) ->
  (((to_uint32 x_2)) <= 255) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32 x_3)) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_5 len_4 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_5 len_4 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_5 len_4 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  ((p_galois'crc32_little'I4 malloc_3 mptr_3 mchar_3 mint_3 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_5 len_4 retres_3 c_3 buf4_3 crc_3 buf_4 len_3)) ->
  ((p_galois'crc32_little'I4 malloc_3 mptr_3 mchar_3 mint_3 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_5 len_4 retres_3
     ((to_uint32 ((lxor ((lsr c_3 8)) x_3)))) buf4_3 crc_3 ((shift buf_4 1))
     x_1))

end

(* ---------------------------------------------------------- *)
(* --- Establishment of Invariant 'galois_decorator' (generated) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_loop_inv_galois_decorator_4_established
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits

goal WP "expl:Establishment of Invariant 'galois_decorator' (generated)":
  forall c_2 c_1 c_0 crc_3 crc_2 crc_1 crc_0 len_3 len_2 len_1 len_0 retres_2
    retres_1 retres_0 : int.
  forall malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_3 mchar_2 mchar_1 mchar_0 mint_3 mint_2 mint_1 mint_0
    : map addr int.
  forall mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_5 buf_4 buf_3 buf_2 buf_1 buf_0 buf4_1 buf4_0 : addr.
  (0 <> len_2) ->
  (len_2 <= 3) ->
  (len_1 <= 31) ->
  ((framed mptr_3)) ->
  ((linked malloc_3)) ->
  ((sconst mchar_3)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((p_galois'crc32_little'P malloc_3 mptr_3 mchar_3 mint_3 crc_3 buf_5 len_3)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_5 len_3 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_5 len_3 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_5 len_3 retres_2 c_2 buf_4 crc_2 buf_3 len_2)) ->
  ((p_galois'crc32_little'I4 malloc_2 mptr_2 mchar_2 mint_2 malloc_3 mptr_3
     mchar_3 mint_3 crc_3 buf_5 len_3 retres_2 c_2 buf_4 crc_2 buf_4 len_2))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4770) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_index_bound_38
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,index_bound' (file ../../proof/zlib/.galois/source.c, line 4770)":
  forall c_3 c_2 c_1 c_0 crc_4 crc_3 crc_2 crc_1 crc_0 len_4 len_3 len_2
    len_1 len_0 retres_3 retres_2 retres_1 retres_0 : int.
  forall malloc_4 malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_4 mchar_3 mchar_2 mchar_1 mchar_0 mint_4 mint_3 mint_2 mint_1
    mint_0 : map addr int.
  forall mptr_4 mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_3 buf4_2 buf4_1 buf4_0 tmp_9_0
    : addr.
  let x_0 = mint_3[tmp_9_0] in
  let x_1 = (land 255 ((to_uint32 ((lxor c_3 x_0))))) in
  (0 <> len_2) ->
  (len_2 <= 3) ->
  (len_1 <= 31) ->
  ((framed mptr_4)) ->
  ((linked malloc_4)) ->
  ((sconst mchar_4)) ->
  ((is_uint64 crc_4)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_3)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_3)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_4)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint8 x_0)) ->
  ((p_galois'crc32_little'P malloc_4 mptr_4 mchar_4 mint_4 crc_4 buf_4 len_4)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32
     mint_3[(shift ((shift ((shift ((global g_crc_table_6697)) 0)) 0)) x_1)])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  ((p_galois'crc32_little'I4 malloc_3 mptr_3 mchar_3 mint_3 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_3 c_3 buf4_3 crc_3 tmp_9_0
     len_3)) ->
  (((to_uint32 x_1)) <= 255)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4770) --- *)
(* ---------------------------------------------------------- *)
theory VCcrc32_little_assert_rte_mem_access_11
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_Galois_axiomatic10.A_Galois_axiomatic10
use import Cbits.Cbits
use import Globals.Globals

goal WP "expl:Assertion 'rte,mem_access' (file ../../proof/zlib/.galois/source.c, line 4770)":
  forall c_3 c_2 c_1 c_0 crc_4 crc_3 crc_2 crc_1 crc_0 len_4 len_3 len_2
    len_1 len_0 retres_3 retres_2 retres_1 retres_0 : int.
  forall malloc_4 malloc_3 malloc_2 malloc_1 malloc_0 : map int int.
  forall mchar_4 mchar_3 mchar_2 mchar_1 mchar_0 mint_4 mint_3 mint_2 mint_1
    mint_0 : map addr int.
  forall mptr_4 mptr_3 mptr_2 mptr_1 mptr_0 : map addr addr.
  forall buf_4 buf_3 buf_2 buf_1 buf_0 buf4_3 buf4_2 buf4_1 buf4_0 tmp_9_0
    : addr.
  let x_0 = mint_3[tmp_9_0] in
  (0 <> len_2) ->
  (len_2 <= 3) ->
  (len_1 <= 31) ->
  ((framed mptr_4)) ->
  ((linked malloc_4)) ->
  ((sconst mchar_4)) ->
  ((is_uint64 crc_4)) ->
  ((is_uint64 crc_3)) ->
  ((is_uint64 crc_2)) ->
  ((is_uint64 crc_1)) ->
  ((is_uint64 crc_0)) ->
  ((is_uint64 retres_3)) ->
  ((is_uint64 retres_2)) ->
  ((is_uint64 retres_1)) ->
  ((is_uint64 retres_0)) ->
  ((is_uint32 c_3)) ->
  ((is_uint32 c_2)) ->
  ((is_uint32 c_1)) ->
  ((is_uint32 c_0)) ->
  ((is_uint32 len_4)) ->
  ((is_uint32 len_3)) ->
  ((is_uint32 len_2)) ->
  ((is_uint32 len_1)) ->
  ((is_uint32 len_0)) ->
  ((is_uint8 x_0)) ->
  ((p_galois'crc32_little'P malloc_4 mptr_4 mchar_4 mint_4 crc_4 buf_4 len_4)) ->
  ((0 = len_0) \/ ((buf_1 = buf_0) /\ (0 = ((land 3 ((cast buf_1))))))) ->
  ((is_uint32
     mint_3[(shift ((shift ((shift ((global g_crc_table_6697)) 0)) 0))
              ((land 255 ((to_uint32 ((lxor c_3 x_0)))))))])) ->
  ((p_galois'crc32_little'I1 malloc_0 mptr_0 mchar_0 mint_0 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_0 c_0 buf4_0 crc_0 buf_0 len_0)) ->
  ((p_galois'crc32_little'I2 malloc_1 mptr_1 mchar_1 mint_1 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_1 c_1 buf4_1 crc_1 buf_2 len_1)) ->
  ((p_galois'crc32_little'I3 malloc_2 mptr_2 mchar_2 mint_2 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_2 c_2 buf4_2 crc_2 buf_3 len_2)) ->
  ((p_galois'crc32_little'I4 malloc_3 mptr_3 mchar_3 mint_3 malloc_4 mptr_4
     mchar_4 mint_4 crc_4 buf_4 len_4 retres_3 c_3 buf4_3 crc_3 tmp_9_0
     len_3)) ->
  ((valid_rd malloc_3 tmp_9_0 1))

end

